{"file_contents":{"DEPLOYMENT.md":{"content":"# Deployment Guide for Workflow\n\nThis document provides comprehensive deployment instructions and dependency information for the Workflow application.\n\n## üì¶ Dependencies\n\n### Core Dependencies\n\nThe application uses the following Python packages (refer to `pyproject.toml` for exact versions):\n\n#### Web Framework\n- **Flask** - Lightweight WSGI web application framework\n- **Flask-Login** - User session management and authentication\n- **Flask-SQLAlchemy** - Flask integration for SQLAlchemy ORM\n- **Flask-WTF** - Form handling with CSRF protection and file uploads\n\n#### Database\n- **SQLAlchemy** - Python SQL toolkit and Object Relational Mapper\n- **psycopg2-binary** - PostgreSQL adapter for Python\n\n#### Forms and Validation\n- **WTForms** - Flexible forms validation and rendering library\n- **email-validator** - Email address validation\n\n#### Security and Utilities\n- **Werkzeug** - WSGI utility library with password hashing\n- **itsdangerous** - Secure token generation and data signing\n\n#### Image Processing\n- **Pillow (PIL)** - Python Imaging Library for thumbnail generation\n\n#### Email Services (Optional)\n- **sendgrid** - Email delivery service for notifications\n\n#### Production Server\n- **gunicorn** - Python WSGI HTTP Server for UNIX\n\n### Installing Dependencies\n\n#### Using UV (Recommended for Replit)\n```bash\nuv sync\n```\n\n#### Using pip\n```bash\npip install -r requirements.txt\n```\n\n#### Manual Installation\n```bash\npip install flask flask-login flask-sqlalchemy flask-wtf\npip install sqlalchemy psycopg2-binary\npip install wtforms email-validator\npip install werkzeug itsdangerous\npip install pillow sendgrid gunicorn\n```\n\n## üöÄ Deployment Options\n\n### 1. Replit Deployment (Recommended)\n\nThe application is optimized for Replit deployment:\n\n1. **Fork/Import the repository** to your Replit account\n2. **Configure environment variables** in Replit Secrets:\n   - `DATABASE_URL`: PostgreSQL connection string\n   - `SESSION_SECRET`: Random secret key for Flask sessions\n   - `SENDGRID_API_KEY`: (Optional) For email functionality\n\n3. **Run the application**:\n   - The `.replit` file is already configured\n   - Click \"Run\" or use the command: `gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app`\n\n4. **Database Setup**:\n   - PostgreSQL is automatically provisioned in Replit\n   - Tables are created automatically on first run\n\n### 2. Heroku Deployment\n\n1. **Create a Heroku app**:\n   ```bash\n   heroku create your-app-name\n   ```\n\n2. **Add PostgreSQL addon**:\n   ```bash\n   heroku addons:create heroku-postgresql:hobby-dev\n   ```\n\n3. **Set environment variables**:\n   ```bash\n   heroku config:set SESSION_SECRET=\"your-secret-key-here\"\n   heroku config:set SENDGRID_API_KEY=\"your-sendgrid-key\" # optional\n   ```\n\n4. **Deploy**:\n   ```bash\n   git push heroku main\n   ```\n\n### 3. DigitalOcean App Platform\n\n1. **Create new app** from GitHub repository\n2. **Configure build settings**:\n   - Build Command: `pip install -r requirements.txt`\n   - Run Command: `gunicorn --bind 0.0.0.0:$PORT main:app`\n3. **Add database**: PostgreSQL managed database\n4. **Set environment variables** in app settings\n\n### 4. AWS Elastic Beanstalk\n\n1. **Install EB CLI**:\n   ```bash\n   pip install awsebcli\n   ```\n\n2. **Initialize application**:\n   ```bash\n   eb init\n   eb create production\n   ```\n\n3. **Configure database**: RDS PostgreSQL instance\n4. **Set environment variables** in EB console\n\n### 5. Docker Deployment\n\nCreate a `Dockerfile`:\n\n```dockerfile\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY pyproject.toml uv.lock ./\nRUN pip install uv && uv sync --frozen\n\nCOPY . .\n\nEXPOSE 5000\n\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"main:app\"]\n```\n\nBuild and run:\n```bash\ndocker build -t academic-tracker .\ndocker run -p 5000:5000 academic-tracker\n```\n\n### 6. VPS/Traditional Server\n\nFor Ubuntu/Debian servers:\n\n1. **Install system dependencies**:\n   ```bash\n   sudo apt update\n   sudo apt install python3 python3-pip postgresql nginx\n   ```\n\n2. **Set up PostgreSQL**:\n   ```bash\n   sudo -u postgres createdb academic_tracker\n   sudo -u postgres createuser tracker_user\n   ```\n\n3. **Install Python dependencies**:\n   ```bash\n   pip3 install -r requirements.txt\n   ```\n\n4. **Configure Nginx** (optional, for reverse proxy):\n   ```nginx\n   server {\n       listen 80;\n       server_name your-domain.com;\n       \n       location / {\n           proxy_pass http://127.0.0.1:5000;\n           proxy_set_header Host $host;\n           proxy_set_header X-Real-IP $remote_addr;\n       }\n   }\n   ```\n\n5. **Run with systemd** (production):\n   Create `/etc/systemd/system/academic-tracker.service`:\n   ```ini\n   [Unit]\n   Description=Workflow\n   After=network.target\n   \n   [Service]\n   User=www-data\n   WorkingDirectory=/path/to/app\n   ExecStart=/usr/local/bin/gunicorn --bind 0.0.0.0:5000 main:app\n   Restart=always\n   \n   [Install]\n   WantedBy=multi-user.target\n   ```\n\n## üîß Configuration\n\n### Required Environment Variables\n\n- `DATABASE_URL`: PostgreSQL connection string\n  - Format: `postgresql://username:password@host:port/database`\n  - Example: `postgresql://tracker:password123@localhost:5432/academic_tracker`\n\n- `SESSION_SECRET`: Flask session secret key\n  - Generate: `python -c \"import secrets; print(secrets.token_hex(32))\"`\n\n### Optional Environment Variables\n\n- `SENDGRID_API_KEY`: For email functionality\n- `FLASK_ENV`: Set to `production` for production deployment\n- `FLASK_DEBUG`: Set to `False` for production\n\n### Database Configuration\n\nThe application automatically creates all required tables on startup. For production deployments:\n\n1. **Ensure PostgreSQL is running** and accessible\n2. **Create database** with appropriate user permissions\n3. **Set DATABASE_URL** environment variable\n4. **Run application** - tables will be created automatically\n\n### File Upload Configuration\n\n- **Upload Directory**: `uploads/` (created automatically)\n- **Max File Size**: 16MB (configurable in code)\n- **Allowed Extensions**: Documents, images, archives\n- **Permissions**: Ensure write permissions on upload directory\n\n## üõ°Ô∏è Security Considerations\n\n### Production Checklist\n\n- [ ] Set `FLASK_DEBUG=False`\n- [ ] Use strong `SESSION_SECRET`\n- [ ] Configure HTTPS/SSL\n- [ ] Set up database backups\n- [ ] Configure log rotation\n- [ ] Implement rate limiting\n- [ ] Set up monitoring\n- [ ] Regular security updates\n\n### Recommended Security Headers\n\nAdd these headers via reverse proxy (Nginx/Apache):\n\n```\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nStrict-Transport-Security: max-age=31536000; includeSubDomains\nContent-Security-Policy: default-src 'self'\n```\n\n## üìä Monitoring and Maintenance\n\n### Log Files\n- **Application logs**: Check Flask/Gunicorn logs\n- **Database logs**: Monitor PostgreSQL logs\n- **Web server logs**: Nginx/Apache access logs\n\n### Performance Monitoring\n- Database connection pooling (already configured)\n- Static file serving (configure web server)\n- Application metrics (consider APM tools)\n\n### Backup Strategy\n- **Database backups**: Regular PostgreSQL dumps\n- **File uploads**: Backup `uploads/` directory\n- **Configuration**: Version control environment configs\n\n## üîÑ Updates and Maintenance\n\n### Updating the Application\n1. **Backup database and files**\n2. **Pull latest code changes**\n3. **Update dependencies**: `uv sync` or `pip install -r requirements.txt`\n4. **Restart application server**\n5. **Test functionality**\n\n### Database Migrations\nThe application uses SQLAlchemy's `create_all()` method. For schema changes:\n1. **Backup existing data**\n2. **Update models in `models.py`**\n3. **Restart application** (tables updated automatically)\n4. **For complex migrations**, consider using Flask-Migrate\n\n---\n\n## üÜò Troubleshooting\n\n### Common Issues\n\n1. **Database Connection Errors**\n   - Check DATABASE_URL format\n   - Verify PostgreSQL is running\n   - Confirm user permissions\n\n2. **File Upload Issues**\n   - Check upload directory permissions\n   - Verify disk space\n   - Review file size limits\n\n3. **Session Issues**\n   - Ensure SESSION_SECRET is set\n   - Check session configuration\n   - Verify cookie settings\n\n4. **Import Errors**\n   - Confirm all dependencies installed\n   - Check Python version compatibility\n   - Verify virtual environment activation\n\n### Getting Help\n\n- Check application logs first\n- Review this deployment guide\n- Consult Flask and PostgreSQL documentation\n- Create issues in the repository for bugs\n\n---\n\nThis deployment guide covers most common scenarios. Choose the deployment method that best fits your infrastructure and requirements.","size_bytes":8611},"README.md":{"content":"# Workflow\n\nA comprehensive Flask-based web application designed to help students organize, manage, and track their academic projects with advanced collaborative features, study analytics, and productivity tools.\n\n![Workflow](https://img.shields.io/badge/Flask-2.3+-blue.svg) ![PostgreSQL](https://img.shields.io/badge/PostgreSQL-15+-green.svg) ![Bootstrap](https://img.shields.io/badge/Bootstrap-5.3-purple.svg) ![Python](https://img.shields.io/badge/Python-3.11+-yellow.svg)\n\n## üéØ Application Overview\n\nThe Workflow is built for students who need a centralized platform to manage their academic workload effectively. Whether you're working on individual assignments or collaborating on group projects, this application provides the tools you need to stay organized, track progress, and maintain productivity throughout your academic journey.\n\n### Key Use Cases\n- **Project Management**: Organize academic projects by course with detailed tracking\n- **Task Management**: Break down projects into manageable tasks with priority levels\n- **Team Collaboration**: Work with classmates on group projects with role-based permissions\n- **Study Analytics**: Track study sessions and analyze productivity patterns\n- **File Management**: Upload and organize project-related files securely\n- **Progress Monitoring**: Visualize project completion and study habits\n\n## ‚ú® Features\n\n### üìö Core Project Management\n- **Project Organization**: Create and manage academic projects categorized by course\n- **Task Hierarchy**: Break down projects into tasks with priority levels (High, Medium, Low)\n- **Status Tracking**: Monitor progress with project states (Planning, In Progress, Completed, On Hold)\n- **Deadline Management**: Set and track project and task deadlines with overdue detection\n- **Course Integration**: Organize projects by academic courses for better structure\n\n### ü§ù Collaboration Features\n- **Multi-User Projects**: Invite classmates to collaborate on group projects\n- **Role-Based Permissions**: Assign roles (Owner, Collaborator, Viewer) with appropriate access levels\n- **Project Comments**: Built-in discussion threads for team communication\n- **Activity Logging**: Comprehensive audit trail of all project activities and changes\n- **File Sharing**: Upload and share project files with team members\n\n### üìä Study Analytics & Productivity\n- **Study Timer**: Built-in timer with real-time tracking for focused study sessions\n- **Session Management**: Start, pause, and stop study sessions with automatic duration calculation\n- **Analytics Dashboard**: Visualize study patterns with interactive Chart.js charts\n- **Weekly Insights**: Track study habits over time with weekly breakdown charts\n- **Project Time Analysis**: See time distribution across different projects\n- **Progress Statistics**: Monitor total study time, session count, and average session length\n\n### üìÅ File Management\n- **Secure File Upload**: Upload project files with size limits and type validation\n- **Image Thumbnails**: Automatic thumbnail generation for image files\n- **Organized Storage**: Files organized by project with structured directory system\n- **File Access Control**: Permission-based file access for collaborative projects\n\n### üîç Advanced Search\n- **Full-Text Search**: Search across projects, tasks, files, and collaborators\n- **Filtered Results**: Filter search results by content type (projects, tasks, files)\n- **Smart Matching**: Search project titles, descriptions, course names, and task content\n\n### üîê Authentication & Security\n- **Custom User Authentication**: Secure registration and login system\n- **Password Security**: Werkzeug-powered password hashing with strength validation\n- **Session Management**: Flask sessions with CSRF protection\n- **Email Verification**: Simplified registration process (verification removed for ease of use)\n- **Data Isolation**: User-specific data access with proper authorization checks\n\n## üõ† Technology Stack\n\n### Backend Framework\n- **Flask 2.3+**: Lightweight WSGI web application framework\n- **Python 3.11+**: Modern Python with type hints and performance improvements\n- **Gunicorn**: Production-ready WSGI HTTP server\n\n### Database & ORM\n- **PostgreSQL 15+**: Robust relational database with advanced features\n- **SQLAlchemy 2.0+**: Modern Python SQL toolkit and ORM\n- **Flask-SQLAlchemy**: Flask integration for SQLAlchemy\n\n### Frontend Technologies\n- **Jinja2**: Server-side templating engine\n- **Bootstrap 5.3**: Modern CSS framework with dark theme support\n- **Feather Icons**: Lightweight icon library for consistent UI\n- **Chart.js 4.0+**: Interactive charts for analytics visualization\n- **Vanilla JavaScript**: Client-side interactions without heavy frameworks\n\n### Authentication & Forms\n- **Flask-Login**: User session management\n- **Flask-WTF**: Form handling with CSRF protection and file upload support\n- **Werkzeug Security**: Password hashing and security utilities\n- **Email-Validator**: Email address validation\n\n### File Handling & Image Processing\n- **Pillow (PIL)**: Python Imaging Library for thumbnail generation\n- **Secure File Upload**: Size limits, type validation, and organized storage\n\n### Development & Deployment\n- **Flask Debug Mode**: Development server with auto-reload\n- **Python Logging**: Comprehensive error tracking and debugging\n- **Replit Integration**: Optimized for Replit deployment environment\n\n## üìÅ Repository Structure\n\n```\nacademic-project-tracker/\n‚îú‚îÄ‚îÄ static/                     # Static assets\n‚îÇ   ‚îú‚îÄ‚îÄ css/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ style.css          # Custom stylesheet overrides\n‚îÇ   ‚îî‚îÄ‚îÄ js/\n‚îÇ       ‚îî‚îÄ‚îÄ app.js             # Client-side JavaScript\n‚îú‚îÄ‚îÄ templates/                  # Jinja2 templates\n‚îÇ   ‚îú‚îÄ‚îÄ auth/                  # Authentication templates\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.html\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.html\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forgot_password.html\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ verification_required.html\n‚îÇ   ‚îú‚îÄ‚îÄ base.html              # Base template with navigation\n‚îÇ   ‚îú‚îÄ‚îÄ index.html             # Dashboard/home page\n‚îÇ   ‚îú‚îÄ‚îÄ landing.html           # Landing page for logged-out users\n‚îÇ   ‚îú‚îÄ‚îÄ project_detail.html    # Project detail view\n‚îÇ   ‚îú‚îÄ‚îÄ enhanced_project_detail.html # Enhanced project view with collaboration\n‚îÇ   ‚îú‚îÄ‚îÄ project_form.html      # Project creation/editing form\n‚îÇ   ‚îú‚îÄ‚îÄ courses.html           # Course management\n‚îÇ   ‚îú‚îÄ‚îÄ profile.html           # User profile page\n‚îÇ   ‚îú‚îÄ‚îÄ search.html            # Search results page\n‚îÇ   ‚îú‚îÄ‚îÄ study_analytics.html   # Analytics dashboard\n‚îÇ   ‚îú‚îÄ‚îÄ study_timer.html       # Study timer interface\n‚îÇ   ‚îî‚îÄ‚îÄ 403.html              # Error page\n‚îú‚îÄ‚îÄ uploads/                   # File upload storage directory\n‚îú‚îÄ‚îÄ app.py                     # Flask application factory\n‚îú‚îÄ‚îÄ main.py                    # Application entry point\n‚îú‚îÄ‚îÄ routes.py                  # URL routes and view functions\n‚îú‚îÄ‚îÄ models.py                  # Database models and schemas\n‚îú‚îÄ‚îÄ auth.py                    # Authentication routes and logic\n‚îú‚îÄ‚îÄ forms.py                   # WTForms form definitions\n‚îú‚îÄ‚îÄ utils.py                   # Utility functions and helpers\n‚îú‚îÄ‚îÄ replit.md                  # Project documentation and preferences\n‚îú‚îÄ‚îÄ pyproject.toml            # Python dependencies and project metadata\n‚îú‚îÄ‚îÄ uv.lock                   # Dependency lock file\n‚îú‚îÄ‚îÄ requirements-deploy.txt   # Deployment dependencies list\n‚îú‚îÄ‚îÄ DEPLOYMENT.md            # Comprehensive deployment guide\n‚îú‚îÄ‚îÄ .replit                   # Replit configuration\n‚îî‚îÄ‚îÄ README.md                 # This file\n```\n\n### Key Files Explained\n\n#### Core Application Files\n- **`app.py`**: Flask application factory with database initialization\n- **`main.py`**: Application entry point that imports the Flask app\n- **`routes.py`**: All URL routes and view functions for the application\n- **`models.py`**: SQLAlchemy database models and relationships\n- **`auth.py`**: Authentication routes including login, register, logout\n- **`forms.py`**: WTForms definitions for all application forms\n- **`utils.py`**: Helper functions and utilities used across the application\n\n#### Template Structure\n- **`templates/base.html`**: Master template with navigation, flash messages, and layout\n- **`templates/index.html`**: Dashboard showing project overview and recent activity\n- **`templates/project_detail.html`**: Detailed project view with tasks and collaboration\n- **`templates/study_analytics.html`**: Analytics dashboard with charts and statistics\n- **`templates/study_timer.html`**: Real-time study timer interface\n\n#### Configuration Files\n- **`pyproject.toml`**: Python project configuration and dependencies\n- **`.replit`**: Replit-specific configuration for hosting\n- **`replit.md`**: Project documentation and user preferences\n\n## üöÄ Getting Started\n\n### Prerequisites\n- Python 3.11 or higher\n- PostgreSQL 15 or higher\n- Modern web browser\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd academic-project-tracker\n   ```\n\n2. **Install dependencies**\n   ```bash\n   # Using uv (recommended for Replit)\n   uv sync\n   \n   # Or using pip with requirements file\n   pip install -r requirements-deploy.txt\n   \n   # Or install manually\n   pip install flask flask-login flask-sqlalchemy flask-wtf sqlalchemy psycopg2-binary wtforms email-validator werkzeug itsdangerous pillow gunicorn\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   export DATABASE_URL=\"postgresql://username:password@localhost/academic_tracker\"\n   export SESSION_SECRET=\"your-secret-key-here\"\n   ```\n\n4. **Initialize the database**\n   ```bash\n   python -c \"from app import app, db; app.app_context().push(); db.create_all()\"\n   ```\n\n5. **Run the application**\n   ```bash\n   python main.py\n   # or for production\n   gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app\n   ```\n\n6. **Access the application**\n   - Open your browser to `http://localhost:5000`\n   - Register a new account or login with existing credentials\n\n### Quick Start Guide\n\n1. **Create Your First Project**\n   - Click \"New Project\" in the navigation\n   - Fill in project details, select a course, and set deadline\n   - Add tasks to break down the project work\n\n2. **Start a Study Session**\n   - Navigate to \"Study Timer\" from the More menu\n   - Select a project and click \"Start Session\"\n   - Use the timer to track focused study time\n\n3. **Collaborate with Classmates**\n   - From any project, click \"Manage Collaborators\"\n   - Invite team members by email with appropriate permissions\n   - Use comments to communicate and activity logs to track changes\n\n4. **Analyze Your Progress**\n   - Visit \"Study Analytics\" to see your productivity patterns\n   - Review weekly study charts and project time breakdowns\n   - Monitor your study habits and session statistics\n\n## üé® User Interface\n\nThe application features a modern, responsive design built with Bootstrap 5 and a dark theme optimized for extended study sessions. Key UI elements include:\n\n- **Responsive Navigation**: Collapsible navbar with user menu and feature access\n- **Dashboard Cards**: Quick overview of projects, tasks, and recent activity\n- **Interactive Charts**: Study analytics with hoverable data points and tooltips\n- **Modal Dialogs**: Seamless forms for adding collaborators, comments, and tasks\n- **Progress Indicators**: Visual progress bars for project completion\n- **File Thumbnails**: Image previews for uploaded project files\n- **Real-time Timer**: Large, easy-to-read study session timer\n\n## üîß Configuration\n\n### Environment Variables\n- `DATABASE_URL`: PostgreSQL connection string\n- `SESSION_SECRET`: Flask session secret key\n- `SENDGRID_API_KEY`: Email service API key (optional)\n\n### File Upload Settings\n- Maximum file size: 16MB\n- Allowed file types: Documents, images, archives\n- Storage location: `uploads/` directory\n- Thumbnail generation: Automatic for image files\n\n### Database Configuration\n- Connection pooling with 300-second recycle\n- Pre-ping enabled for connection health checks\n- Automatic table creation on startup\n\n## ü§ù Contributing\n\nContributions are welcome! Please follow these guidelines:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Make your changes with proper documentation\n4. Add tests for new functionality\n5. Commit your changes (`git commit -m 'Add amazing feature'`)\n6. Push to the branch (`git push origin feature/amazing-feature`)\n7. Open a Pull Request\n\n### Development Guidelines\n- Follow PEP 8 Python style guidelines\n- Add docstrings to all functions and classes\n- Update README.md for significant feature additions\n- Test thoroughly before submitting pull requests\n\n## üìú License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôã Support\n\nIf you encounter any issues or have questions:\n\n1. Check the existing issues in the repository\n2. Create a new issue with detailed information\n3. Include error messages and steps to reproduce\n4. For feature requests, provide clear use cases and benefits\n\n## üöÄ Deployment\n\nFor detailed deployment instructions and configuration options, see [DEPLOYMENT.md](DEPLOYMENT.md).\n\n### Quick Deploy Options\n\n- **Replit**: Fork this repository and click Run (fully configured)\n- **Heroku**: `git push heroku main` after configuring PostgreSQL addon\n- **Docker**: Use the provided Dockerfile for containerized deployment\n- **Traditional VPS**: Follow the Ubuntu/Debian setup guide in DEPLOYMENT.md\n\n### Dependencies\n\nAll dependencies are listed in `pyproject.toml` for uv/pip installation, or use `requirements-deploy.txt` for traditional deployments.\n\n## üîÆ Future Enhancements\n\n- **Mobile App**: React Native companion app for mobile access\n- **Calendar Integration**: Sync with Google Calendar and other calendar services\n- **Advanced Analytics**: More detailed productivity insights and recommendations\n- **Export Features**: PDF reports and data export functionality\n- **Integration APIs**: Connect with learning management systems\n- **Notification System**: Email and push notifications for deadlines and updates\n- **Template System**: Project templates for common assignment types\n- **Time Blocking**: Integration with time management methodologies\n\n---\n\nBuilt with ‚ù§Ô∏è for students, by students. Happy studying! üìö","size_bytes":14566},"app.py":{"content":"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nimport os\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport logging\nfrom sqlalchemy.orm import DeclarativeBase\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\n# Initialize Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\") or \"dev-secret-key-change-in-production\"\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1) # needed for url_for to generate with https\n\n# Database configuration\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif not database_url:\n    raise RuntimeError(\"DATABASE_URL environment variable must be set\")\n    \napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    'pool_pre_ping': True,\n    \"pool_recycle\": 300,\n}\n\n# WTF-CSRF configuration\napp.config['WTF_CSRF_ENABLED'] = True\napp.config['WTF_CSRF_TIME_LIMIT'] = None\n\n# File upload configuration\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['ALLOWED_EXTENSIONS'] = {\n    'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', \n    'ppt', 'pptx', 'xls', 'xlsx', 'zip', 'rar', 'py', 'js', 'html', 'css'\n}\n\n# Create upload directory\nimport os\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n# No need to call db.init_app(app) here, it's already done in the constructor.\ndb = SQLAlchemy(app, model_class=Base)\n\n# Create tables\n# Need to put this in module-level to make it work with Gunicorn.\nwith app.app_context():\n    import models  # noqa: F401\n    db.create_all()\n    logging.info(\"Database tables created\")\n","size_bytes":1737},"auth.py":{"content":"import os\nimport secrets\nfrom datetime import datetime, timedelta\nfrom functools import wraps\n\nfrom flask import flash, redirect, request, render_template, url_for, session\nfrom flask_login import LoginManager, login_user, logout_user, current_user, login_required\nfrom itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadSignature\nfrom email_validator import validate_email, EmailNotValidError\n\nfrom app import app, db\nfrom models import User\n\n\n# Flask-Login setup\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n\n# Email verification setup\nserializer = URLSafeTimedSerializer(app.secret_key)\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n\ndef generate_verification_token():\n    \"\"\"Generate a secure verification token\"\"\"\n    return secrets.token_urlsafe(32)\n\n\ndef generate_verification_url(email):\n    \"\"\"Generate email verification URL\"\"\"\n    token = serializer.dumps(email, salt='email-verification')\n    return url_for('verify_email', token=token, _external=True)\n\n\ndef verify_email_token(token, max_age=3600):\n    \"\"\"Verify email verification token (1 hour expiry)\"\"\"\n    try:\n        email = serializer.loads(token, salt='email-verification', max_age=max_age)\n        return email\n    except (SignatureExpired, BadSignature):\n        return None\n\n\ndef generate_reset_token():\n    \"\"\"Generate password reset token\"\"\"\n    return secrets.token_urlsafe(32)\n\n\ndef send_verification_email(user_email, verification_url):\n    \"\"\"Send verification email using SendGrid\"\"\"\n    try:\n        from sendgrid import SendGridAPIClient\n        from sendgrid.helpers.mail import Mail\n        \n        sg = SendGridAPIClient(api_key=os.environ.get('SENDGRID_API_KEY'))\n        \n        message = Mail(\n            from_email='noreply@academictracker.app',\n            to_emails=user_email,\n            subject='Verify Your Workflow Account',\n            html_content=f'''\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <h2 style=\"color: #333;\">Welcome to Workflow!</h2>\n                <p>Thank you for registering. Please verify your email address by clicking the button below:</p>\n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{verification_url}\" style=\"background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">Verify Email Address</a>\n                </div>\n                <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                <p style=\"word-break: break-all; color: #666;\">{verification_url}</p>\n                <p style=\"color: #666; font-size: 14px;\">This link will expire in 1 hour for security reasons.</p>\n            </div>\n            '''\n        )\n        \n        response = sg.send(message)\n        return response.status_code == 202\n    except Exception as e:\n        print(f\"Email sending failed: {e}\")\n        # Fallback: print to console for development\n        print(f\"Verification email for {user_email}: {verification_url}\")\n        return True\n\n\ndef send_password_reset_email(user_email, reset_url):\n    \"\"\"Send password reset email using SendGrid\"\"\"\n    try:\n        from sendgrid import SendGridAPIClient\n        from sendgrid.helpers.mail import Mail\n        \n        sg = SendGridAPIClient(api_key=os.environ.get('SENDGRID_API_KEY'))\n        \n        message = Mail(\n            from_email='noreply@academictracker.app',\n            to_emails=user_email,\n            subject='Reset Your Workflow Password',\n            html_content=f'''\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <h2 style=\"color: #333;\">Password Reset Request</h2>\n                <p>You requested to reset your password. Click the button below to create a new password:</p>\n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"{reset_url}\" style=\"background-color: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">Reset Password</a>\n                </div>\n                <p>If the button doesn't work, copy and paste this link into your browser:</p>\n                <p style=\"word-break: break-all; color: #666;\">{reset_url}</p>\n                <p style=\"color: #666; font-size: 14px;\">This link will expire in 1 hour for security reasons.</p>\n                <p style=\"color: #666; font-size: 14px;\">If you didn't request this, please ignore this email.</p>\n            </div>\n            '''\n        )\n        \n        response = sg.send(message)\n        return response.status_code == 202\n    except Exception as e:\n        print(f\"Email sending failed: {e}\")\n        print(f\"Password reset email for {user_email}: {reset_url}\")\n        return True\n\n\n\n\n\ndef validate_email_address(email):\n    \"\"\"Validate email address format\"\"\"\n    try:\n        validate_email(email)\n        return True\n    except EmailNotValidError:\n        return False\n\n\ndef validate_password_strength(password):\n    \"\"\"Validate password strength\"\"\"\n    if len(password) < 8:\n        return False, \"Password must be at least 8 characters long.\"\n    \n    if not any(c.isupper() for c in password):\n        return False, \"Password must contain at least one uppercase letter.\"\n    \n    if not any(c.islower() for c in password):\n        return False, \"Password must contain at least one lowercase letter.\"\n    \n    if not any(c.isdigit() for c in password):\n        return False, \"Password must contain at least one number.\"\n    \n    return True, \"Password is strong.\"","size_bytes":5882},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed, FileRequired\nfrom wtforms import StringField, PasswordField, SubmitField, BooleanField, TextAreaField, SelectField, HiddenField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError, Optional\nfrom models import User\n\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember Me')\n    submit = SubmitField('Sign In')\n\n\nclass RegisterForm(FlaskForm):\n    first_name = StringField('First Name', validators=[DataRequired(), Length(min=2, max=50)])\n    last_name = StringField('Last Name', validators=[DataRequired(), Length(min=2, max=50)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[\n        DataRequired(),\n        Length(min=8, message='Password must be at least 8 characters long.')\n    ])\n    password2 = PasswordField('Confirm Password', validators=[\n        DataRequired(),\n        EqualTo('password', message='Passwords must match.')\n    ])\n    submit = SubmitField('Create Account')\n    \n    def validate_email(self, email):\n        user = User.query.filter_by(email=email.data.lower()).first()\n        if user:\n            raise ValidationError('This email is already registered. Please choose a different one.')\n\n\nclass ForgotPasswordForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    submit = SubmitField('Reset Password')\n    \n    def validate_email(self, email):\n        user = User.query.filter_by(email=email.data.lower()).first()\n        if not user:\n            raise ValidationError('No account found with that email address.')\n\n\nclass ResetPasswordForm(FlaskForm):\n    password = PasswordField('New Password', validators=[\n        DataRequired(),\n        Length(min=8, message='Password must be at least 8 characters long.')\n    ])\n    password2 = PasswordField('Confirm Password', validators=[\n        DataRequired(),\n        EqualTo('password', message='Passwords must match.')\n    ])\n    submit = SubmitField('Reset Password')\n\n\nclass ChangePasswordForm(FlaskForm):\n    current_password = PasswordField('Current Password', validators=[DataRequired()])\n    password = PasswordField('New Password', validators=[\n        DataRequired(),\n        Length(min=8, message='Password must be at least 8 characters long.')\n    ])\n    password2 = PasswordField('Confirm New Password', validators=[\n        DataRequired(),\n        EqualTo('password', message='Passwords must match.')\n    ])\n    submit = SubmitField('Change Password')\n\n\nclass ProfileForm(FlaskForm):\n    first_name = StringField('First Name', validators=[DataRequired(), Length(min=2, max=50)])\n    last_name = StringField('Last Name', validators=[DataRequired(), Length(min=2, max=50)])\n    submit = SubmitField('Update Profile')\n\n\nclass FileUploadForm(FlaskForm):\n    file = FileField('Choose File', validators=[\n        FileRequired(),\n        FileAllowed(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', \n                    'ppt', 'pptx', 'xls', 'xlsx', 'zip', 'rar', 'py', 'js', 'html', 'css'],\n                   'Invalid file type!')\n    ])\n    description = TextAreaField('Description (optional)', validators=[Optional(), Length(max=500)])\n    submit = SubmitField('Upload File')\n\n\nclass CollaboratorInviteForm(FlaskForm):\n    email = StringField('Email Address', validators=[DataRequired(), Email()])\n    role = SelectField('Role', choices=[\n        ('collaborator', 'Collaborator - Can edit and manage tasks'),\n        ('viewer', 'Viewer - Can only view project details')\n    ], default='collaborator')\n    message = TextAreaField('Invitation Message (optional)', validators=[Optional(), Length(max=500)])\n    submit = SubmitField('Send Invitation')\n\n\nclass CommentForm(FlaskForm):\n    content = TextAreaField('Add a comment', validators=[DataRequired(), Length(min=1, max=1000)])\n    submit = SubmitField('Post Comment')\n\n\nclass SearchForm(FlaskForm):\n    query = StringField('Search projects, tasks, or collaborators...', validators=[DataRequired()])\n    filter_type = SelectField('Filter', choices=[\n        ('all', 'All'),\n        ('projects', 'Projects'),\n        ('tasks', 'Tasks'),\n        ('collaborators', 'Collaborators'),\n        ('files', 'Files')\n    ], default='all')\n    submit = SubmitField('Search')","size_bytes":4499},"main.py":{"content":"from app import app\nimport auth  # Import auth to initialize Flask-Login\nimport routes  # Import routes to register them\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":200},"models.py":{"content":"from datetime import datetime\nfrom enum import Enum\n\nfrom app import db\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False, index=True)\n    password_hash = db.Column(db.String(256), nullable=False)\n    first_name = db.Column(db.String(50), nullable=True)\n    last_name = db.Column(db.String(50), nullable=True)\n    is_verified = db.Column(db.Boolean, default=True, nullable=False)\n    verification_token = db.Column(db.String(100), nullable=True)\n    reset_token = db.Column(db.String(100), nullable=True)\n    reset_token_expires = db.Column(db.DateTime, nullable=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    projects = db.relationship('Project', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    study_sessions = db.relationship('StudySession', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    courses = db.relationship('Course', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def set_password(self, password):\n        \"\"\"Set password hash\"\"\"\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        \"\"\"Check if provided password matches hash\"\"\"\n        return check_password_hash(self.password_hash, password)\n    \n    @property\n    def full_name(self):\n        \"\"\"Get user's full name\"\"\"\n        if self.first_name and self.last_name:\n            return f\"{self.first_name} {self.last_name}\"\n        elif self.first_name:\n            return self.first_name\n        elif self.last_name:\n            return self.last_name\n        return self.email.split('@')[0]\n    \n    def __repr__(self):\n        return f'<User {self.email}>'\n\n\nclass ProjectStatus(Enum):\n    NOT_STARTED = \"Not Started\"\n    IN_PROGRESS = \"In Progress\"\n    ON_HOLD = \"On Hold\"\n    COMPLETED = \"Completed\"\n\n\nclass TaskStatus(Enum):\n    TODO = \"To Do\"\n    IN_PROGRESS = \"In Progress\"\n    DONE = \"Done\"\n\n\nclass Priority(Enum):\n    LOW = \"Low\"\n    MEDIUM = \"Medium\"\n    HIGH = \"High\"\n\n\nclass Project(db.Model):\n    __tablename__ = 'projects'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    course = db.Column(db.String(100))\n    status = db.Column(db.Enum(ProjectStatus), default=ProjectStatus.NOT_STARTED)\n    deadline = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign key to User\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    tasks = db.relationship('Task', backref='project', lazy=True, cascade='all, delete-orphan')\n    notes = db.relationship('ProjectNote', backref='project', lazy=True, cascade='all, delete-orphan')\n    study_sessions = db.relationship('StudySession', backref='project', lazy=True, cascade='all, delete-orphan')\n    files = db.relationship('ProjectFile', backref='project', lazy=True, cascade='all, delete-orphan')\n    \n    def get_collaborators(self):\n        \"\"\"Get all collaborators including the owner\"\"\"\n        collaborators = []\n        # Add owner\n        collaborators.append({\n            'user': self.user,\n            'role': 'owner',\n            'status': 'accepted'\n        })\n        # Add other collaborators\n        for collab in self.collaborators:\n            if collab.status == 'accepted':\n                collaborators.append({\n                    'user': collab.user,\n                    'role': collab.role,\n                    'status': collab.status\n                })\n        return collaborators\n    \n    def can_user_access(self, user):\n        \"\"\"Check if user can access this project\"\"\"\n        if self.user_id == user.id:\n            return True\n        return any(c.user_id == user.id and c.status == 'accepted' for c in self.collaborators)\n    \n    def can_user_edit(self, user):\n        \"\"\"Check if user can edit this project\"\"\"\n        if self.user_id == user.id:\n            return True\n        collab = next((c for c in self.collaborators if c.user_id == user.id), None)\n        return collab and collab.status == 'accepted' and collab.role in ['owner', 'collaborator']\n\n\nclass Task(db.Model):\n    __tablename__ = 'tasks'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    status = db.Column(db.Enum(TaskStatus), default=TaskStatus.TODO)\n    priority = db.Column(db.Enum(Priority), default=Priority.MEDIUM)\n    due_date = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign key to Project\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n\n\nclass ProjectNote(db.Model):\n    __tablename__ = 'project_notes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign key to Project\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n\n\nclass StudySession(db.Model):\n    __tablename__ = 'study_sessions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    duration_minutes = db.Column(db.Integer, nullable=False)\n    description = db.Column(db.Text)\n    start_time = db.Column(db.DateTime, nullable=True)\n    end_time = db.Column(db.DateTime, nullable=True)\n    is_active = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign key to Project\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    \n    # Foreign key to User\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    def get_duration_formatted(self):\n        \"\"\"Get formatted duration string\"\"\"\n        hours = self.duration_minutes // 60\n        minutes = self.duration_minutes % 60\n        if hours > 0:\n            return f\"{hours}h {minutes}m\"\n        return f\"{minutes}m\"\n\n\nclass Course(db.Model):\n    __tablename__ = 'courses'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    code = db.Column(db.String(20))\n    semester = db.Column(db.String(50))\n    year = db.Column(db.Integer)\n    instructor = db.Column(db.String(100))\n    credits = db.Column(db.Integer)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign key to User\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n\n\nclass ProjectFile(db.Model):\n    __tablename__ = 'project_files'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    original_filename = db.Column(db.String(255), nullable=False)\n    file_size = db.Column(db.Integer, nullable=False)\n    file_type = db.Column(db.String(100), nullable=False)\n    file_path = db.Column(db.String(500), nullable=False)\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign keys\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    uploaded_by = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    uploader = db.relationship('User', backref='uploaded_files')\n\n\nclass ProjectCollaborator(db.Model):\n    __tablename__ = 'project_collaborators'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    role = db.Column(db.String(50), default='collaborator')  # owner, collaborator, viewer\n    invited_at = db.Column(db.DateTime, default=datetime.utcnow)\n    accepted_at = db.Column(db.DateTime)\n    status = db.Column(db.String(20), default='pending')  # pending, accepted, declined\n    \n    # Unique constraint\n    __table_args__ = (db.UniqueConstraint('project_id', 'user_id', name='unique_project_collaborator'),)\n    \n    # Relationships\n    project = db.relationship('Project', backref='collaborators')\n    user = db.relationship('User', backref='collaborations')\n\n\nclass ProjectComment(db.Model):\n    __tablename__ = 'project_comments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign keys\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    \n    # Relationships\n    project = db.relationship('Project', backref='comments')\n    author = db.relationship('User', backref='comments')\n\n\nclass ActivityLog(db.Model):\n    __tablename__ = 'activity_logs'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    action = db.Column(db.String(100), nullable=False)  # created, updated, deleted, etc.\n    entity_type = db.Column(db.String(50), nullable=False)  # project, task, file, etc.\n    entity_id = db.Column(db.Integer, nullable=False)\n    description = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('projects.id'), nullable=True)\n    \n    # Relationships\n    user = db.relationship('User', backref='activities')\n    project = db.relationship('Project', backref='activities')","size_bytes":10259},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pyjwt>=2.10.1\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n    \"flask-wtf>=1.2.2\",\n    \"sendgrid>=6.12.4\",\n    \"itsdangerous>=2.2.0\",\n    \"pillow>=11.3.0\",\n    \"wtforms>=3.2.1\",\n]\n","size_bytes":544},"replit.md":{"content":"# Workflow\n\n## Overview\n\nAcademic Project Tracker is a comprehensive Flask-based web application designed to help students manage their academic projects and tasks with advanced collaborative features. The application provides a dashboard for tracking project progress, deadlines, and task completion across different courses. It features an intuitive interface for creating, editing, and organizing projects with associated tasks, status tracking, deadline management, file uploads, team collaboration, email verification, and progress analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templating with Flask for server-side rendering\n- **UI Framework**: Bootstrap 5 with dark theme support for responsive design\n- **Icons**: Feather Icons for consistent iconography\n- **JavaScript**: Vanilla JavaScript for client-side interactions, form validation, and desktop notification system\n- **Styling**: Custom CSS overrides on top of Bootstrap for application-specific styling\n\n### Backend Architecture\n- **Web Framework**: Flask as the lightweight WSGI web application framework\n- **Application Structure**: Modular design with separate files for routes, models, and app configuration\n- **Session Management**: Flask sessions with configurable secret key for security\n- **Data Models**: Object-oriented approach with Python classes for Projects and Tasks\n- **Status Management**: Enums for consistent status and priority handling (ProjectStatus, TaskStatus, Priority)\n\n### Data Storage Solution\n- **Storage Type**: PostgreSQL database with SQLAlchemy ORM\n- **Data Persistence**: Full database persistence with relationship management\n- **User Data Isolation**: All user data (projects, tasks, courses, study sessions) linked to authenticated users\n- **Model Architecture**: SQLAlchemy models with proper foreign key relationships and cascading deletes\n- **Database Features**: Indexes on email fields, enum constraints for status fields, timestamp tracking\n- **File Storage**: Local file system storage with organized project-based directory structure\n- **Collaborative Data**: ProjectCollaborator, ProjectComment, ProjectFile, and ActivityLog models for team features\n- **Permission Controls**: Database-level access control with user role validation\n\n### Authentication and Authorization\n- **Authentication System**: Custom user authentication with Flask-Login\n- **User Registration**: Email-based registration with encrypted password storage\n- **Password Security**: Werkzeug password hashing with strength validation requirements\n- **Email Verification**: Removed for simplicity - all users are verified by default\n- **Session Management**: Flask sessions with CSRF protection via Flask-WTF\n- **Access Control**: User-specific data isolation - users can only access their own projects and data\n- **Forms Security**: All forms protected with CSRF tokens and server-side validation\n\n### Application Features\n- **Project Management**: CRUD operations for academic projects with course categorization\n- **Task Management**: Hierarchical task system linked to projects with priority levels\n- **Status Tracking**: Multiple status states for both projects and tasks\n- **Dashboard Analytics**: Project statistics and progress visualization\n- **Deadline Management**: Date-based deadline tracking with overdue detection\n- **Course Organization**: Projects grouped by academic course or category\n- **File Upload System**: Secure file upload with size limits, type validation, and thumbnail generation for images\n- **Collaborative Features**: Multi-user project collaboration with role-based permissions (owner, collaborator, viewer)\n- **Email Verification**: Removed for simplicity - all users are automatically verified\n- **Comment System**: Project-based discussion threads for team communication\n- **Activity Logging**: Comprehensive audit trail of all project activities and changes\n- **Advanced Search**: Full-text search across projects, tasks, files, and collaborators\n- **Permission Management**: Granular access control for project viewing and editing\n- **Study Analytics**: Comprehensive study session tracking with visualizations and progress charts\n- **Study Timer**: Built-in timer functionality for tracking study sessions with real-time clock\n- **Data Visualization**: Chart.js powered charts for weekly study patterns and project breakdowns\n- **Desktop Notifications**: Browser-based desktop notifications for study session reminders, deadline alerts, task completions, and collaboration updates\n\n## External Dependencies\n\n### Frontend Dependencies\n- **Bootstrap 5**: CSS framework loaded via CDN for responsive UI components\n- **Feather Icons**: Icon library loaded via CDN for consistent iconography\n- **Bootstrap JavaScript**: For interactive components like modals and alerts\n\n### Backend Dependencies\n- **Flask**: Core web framework for Python\n- **Flask-Login**: User session management and authentication\n- **Flask-WTF**: Form handling and CSRF protection with file upload support\n- **Flask-SQLAlchemy**: Database ORM for PostgreSQL\n- **Werkzeug**: Password hashing and security utilities\n- **email-validator**: Email address validation\n- **itsdangerous**: Secure token generation for email verification\n- **SendGrid**: Email delivery service for verification and notifications\n- **Pillow**: Image processing for thumbnail generation and file handling\n- **Python Standard Library**: datetime, enum, os, logging, secrets modules for core functionality\n\n### Development Dependencies\n- **Flask Debug Mode**: Enabled for development with automatic reloading\n- **Python Logging**: Configured for debugging and error tracking\n\n### Infrastructure\n- **Deployment**: Configured for Replit environment with host='0.0.0.0' and port=5000\n- **Environment Variables**: Support for SESSION_SECRET environment variable\n- **Static Assets**: CSS and JavaScript files served via Flask static file handling\n\n## Documentation\n\n### README.md\n- **Comprehensive Documentation**: Complete project overview with feature descriptions, tech stack details, and repository structure\n- **Getting Started Guide**: Step-by-step installation and setup instructions\n- **User Guide**: Quick start guide for creating projects, using the study timer, and collaborating\n- **Development Guidelines**: Contributing guidelines and coding standards\n- **Future Roadmap**: Planned enhancements and feature additions\n\nThe application now includes full PostgreSQL database integration and is production-ready with proper authentication, file management, and collaborative features.","size_bytes":6684},"replit_auth.py":{"content":"import jwt\nimport os\nimport uuid\nfrom functools import wraps\nfrom urllib.parse import urlencode\n\nfrom flask import g, session, redirect, request, render_template, url_for\nfrom flask_dance.consumer import (\n    OAuth2ConsumerBlueprint,\n    oauth_authorized,\n    oauth_error,\n)\nfrom flask_dance.consumer.storage import BaseStorage\nfrom flask_login import LoginManager, login_user, logout_user, current_user\nfrom oauthlib.oauth2.rfc6749.errors import InvalidGrantError\nfrom sqlalchemy.exc import NoResultFound\nfrom werkzeug.local import LocalProxy\n\nfrom app import app, db\nfrom models import OAuth, User\n\nlogin_manager = LoginManager(app)\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(user_id)\n\n\nclass UserSessionStorage(BaseStorage):\n\n    def get(self, blueprint):\n        try:\n            token = db.session.query(OAuth).filter_by(\n                user_id=current_user.get_id(),\n                browser_session_key=g.browser_session_key,\n                provider=blueprint.name,\n            ).one().token\n        except NoResultFound:\n            token = None\n        return token\n\n    def set(self, blueprint, token):\n        db.session.query(OAuth).filter_by(\n            user_id=current_user.get_id(),\n            browser_session_key=g.browser_session_key,\n            provider=blueprint.name,\n        ).delete()\n        new_model = OAuth()\n        new_model.user_id = current_user.get_id()\n        new_model.browser_session_key = g.browser_session_key\n        new_model.provider = blueprint.name\n        new_model.token = token\n        db.session.add(new_model)\n        db.session.commit()\n\n    def delete(self, blueprint):\n        db.session.query(OAuth).filter_by(\n            user_id=current_user.get_id(),\n            browser_session_key=g.browser_session_key,\n            provider=blueprint.name).delete()\n        db.session.commit()\n\n\ndef make_replit_blueprint():\n    try:\n        repl_id = os.environ['REPL_ID']\n    except KeyError:\n        raise SystemExit(\"the REPL_ID environment variable must be set\")\n\n    issuer_url = os.environ.get('ISSUER_URL', \"https://replit.com/oidc\")\n\n    replit_bp = OAuth2ConsumerBlueprint(\n        \"replit_auth\",\n        __name__,\n        client_id=repl_id,\n        client_secret=None,\n        base_url=issuer_url,\n        authorization_url_params={\n            \"prompt\": \"login consent\",\n        },\n        token_url=issuer_url + \"/token\",\n        token_url_params={\n            \"auth\": (),\n            \"include_client_id\": True,\n        },\n        auto_refresh_url=issuer_url + \"/token\",\n        auto_refresh_kwargs={\n            \"client_id\": repl_id,\n        },\n        authorization_url=issuer_url + \"/auth\",\n        use_pkce=True,\n        code_challenge_method=\"S256\",\n        scope=[\"openid\", \"profile\", \"email\", \"offline_access\"],\n        storage=UserSessionStorage(),\n    )\n\n    @replit_bp.before_app_request\n    def set_applocal_session():\n        if '_browser_session_key' not in session:\n            session['_browser_session_key'] = uuid.uuid4().hex\n        session.modified = True\n        g.browser_session_key = session['_browser_session_key']\n        g.flask_dance_replit = replit_bp.session\n\n    @replit_bp.route(\"/logout\")\n    def logout():\n        del replit_bp.token\n        logout_user()\n\n        end_session_endpoint = issuer_url + \"/session/end\"\n        encoded_params = urlencode({\n            \"client_id\":\n            repl_id,\n            \"post_logout_redirect_uri\":\n            request.url_root,\n        })\n        logout_url = f\"{end_session_endpoint}?{encoded_params}\"\n\n        return redirect(logout_url)\n\n    @replit_bp.route(\"/error\")\n    def error():\n        return render_template(\"403.html\"), 403\n\n    return replit_bp\n\n\ndef save_user(user_claims):\n    user = User()\n    user.id = user_claims['sub']\n    user.email = user_claims.get('email')\n    user.first_name = user_claims.get('first_name')\n    user.last_name = user_claims.get('last_name')\n    user.profile_image_url = user_claims.get('profile_image_url')\n    merged_user = db.session.merge(user)\n    db.session.commit()\n    return merged_user\n\n\n@oauth_authorized.connect\ndef logged_in(blueprint, token):\n    user_claims = jwt.decode(token['id_token'],\n                             options={\"verify_signature\": False})\n    user = save_user(user_claims)\n    login_user(user)\n    blueprint.token = token\n    next_url = session.pop(\"next_url\", None)\n    if next_url is not None:\n        return redirect(next_url)\n\n\n@oauth_error.connect\ndef handle_error(blueprint, error, error_description=None, error_uri=None):\n    return redirect(url_for('replit_auth.error'))\n\n\ndef require_login(f):\n\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            session[\"next_url\"] = get_next_navigation_url(request)\n            return redirect(url_for('replit_auth.login'))\n\n        expires_in = replit.token.get('expires_in', 0)\n        if expires_in < 0:\n            refresh_token_url = issuer_url + \"/token\"\n            try:\n                token = replit.refresh_token(token_url=refresh_token_url,\n                                             client_id=os.environ['REPL_ID'])\n            except InvalidGrantError:\n                # If the refresh token is invalid, the users needs to re-login.\n                session[\"next_url\"] = get_next_navigation_url(request)\n                return redirect(url_for('replit_auth.login'))\n            replit.token_updater(token)\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n\n\ndef get_next_navigation_url(request):\n    is_navigation_url = request.headers.get(\n        'Sec-Fetch-Mode') == 'navigate' and request.headers.get(\n            'Sec-Fetch-Dest') == 'document'\n    if is_navigation_url:\n        return request.url\n    return request.referrer or request.url\n\n\nreplit = LocalProxy(lambda: g.flask_dance_replit)","size_bytes":5880},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, send_file, jsonify\nfrom flask_login import current_user, login_user, logout_user, login_required\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import func, desc, or_, and_\nimport os\n\nfrom app import app, db\nfrom models import (Project, Task, ProjectStatus, TaskStatus, Priority, ProjectNote, StudySession, Course, User,\n                   ProjectFile, ProjectCollaborator, ProjectComment, ActivityLog)\nfrom auth import generate_verification_url, verify_email_token, send_verification_email, validate_password_strength\nfrom forms import (LoginForm, RegisterForm, ForgotPasswordForm, ResetPasswordForm, ChangePasswordForm, ProfileForm,\n                  FileUploadForm, CollaboratorInviteForm, CommentForm, SearchForm)\nfrom utils import save_uploaded_file, format_file_size, get_file_icon, log_activity\n\n\n@app.route('/')\ndef index():\n    \"\"\"Dashboard view - shows landing page for logged out users, dashboard for logged in users\"\"\"\n    if not current_user.is_authenticated:\n        return render_template('landing.html')\n    \n    # Get user's projects\n    projects = Project.query.filter_by(user_id=current_user.id).all()\n    \n    # Calculate project statistics\n    total_projects = len(projects)\n    completed_projects = len([p for p in projects if p.status == ProjectStatus.COMPLETED])\n    in_progress_projects = len([p for p in projects if p.status == ProjectStatus.IN_PROGRESS])\n    overdue_projects = len([p for p in projects if p.deadline and p.deadline < datetime.utcnow() and p.status != ProjectStatus.COMPLETED])\n    \n    # Group projects by course\n    projects_by_course = {}\n    for project in projects:\n        course = project.course or \"Uncategorized\"\n        if course not in projects_by_course:\n            projects_by_course[course] = []\n        projects_by_course[course].append(project)\n    \n    # Get recent study sessions\n    recent_sessions = StudySession.query.filter_by(user_id=current_user.id)\\\n        .order_by(desc(StudySession.created_at)).limit(5).all()\n    \n    return render_template('index.html',\n                         projects=projects,\n                         projects_by_course=projects_by_course,\n                         total_projects=total_projects,\n                         completed_projects=completed_projects,\n                         in_progress_projects=in_progress_projects,\n                         overdue_projects=overdue_projects,\n                         recent_sessions=recent_sessions,\n                         today=datetime.utcnow())\n\n\n# Authentication Routes\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data.lower()).first()\n        \n        if user and user.check_password(form.password.data):\n            login_user(user, remember=form.remember_me.data)\n            next_page = request.args.get('next')\n            flash(f'Welcome back, {user.full_name}!', 'success')\n            return redirect(next_page) if next_page else redirect(url_for('index'))\n        else:\n            flash('Invalid email or password.', 'error')\n    \n    return render_template('auth/login.html', form=form)\n\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"User registration\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = RegisterForm()\n    if form.validate_on_submit():\n        # Validate password strength\n        is_strong, message = validate_password_strength(form.password.data)\n        if not is_strong:\n            flash(message, 'error')\n            return render_template('auth/register.html', form=form)\n        \n        # Create new user\n        user = User(\n            email=form.email.data.lower(),\n            first_name=form.first_name.data,\n            last_name=form.last_name.data,\n            is_verified=True\n        )\n        user.set_password(form.password.data)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        flash('Registration successful! You can now log in to your account.', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('auth/register.html', form=form)\n\n\n@app.route('/logout')\n@login_required\ndef logout():\n    \"\"\"User logout\"\"\"\n    logout_user()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('index'))\n\n\n# Email verification routes removed for simplicity\n\n\n@app.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    \"\"\"Forgot password form\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = ForgotPasswordForm()\n    if form.validate_on_submit():\n        # For now, just show a message\n        flash('Password reset functionality will be available soon. Please contact support.', 'info')\n        return redirect(url_for('login'))\n    \n    return render_template('auth/forgot_password.html', form=form)\n\n\n# Project Management Routes\n@app.route('/project/new', methods=['GET', 'POST'])\n@login_required\ndef new_project():\n    \"\"\"Create a new project\"\"\"\n    if request.method == 'POST':\n        title = request.form.get('title', '').strip()\n        description = request.form.get('description', '').strip()\n        course = request.form.get('course', '').strip()\n        status = request.form.get('status', ProjectStatus.NOT_STARTED.value)\n        deadline_str = request.form.get('deadline', '').strip()\n        \n        # Validation\n        if not title:\n            flash('Project title is required.', 'error')\n            return render_template('project_form.html', \n                                 title='New Project',\n                                 project=None,\n                                 form_data=request.form)\n        \n        deadline = None\n        if deadline_str:\n            try:\n                deadline = datetime.fromisoformat(deadline_str)\n            except ValueError:\n                flash('Invalid deadline format.', 'error')\n                return render_template('project_form.html', \n                                     title='New Project',\n                                     project=None,\n                                     form_data=request.form)\n        \n        # Create new project\n        project = Project(\n            title=title,\n            description=description,\n            course=course,\n            status=ProjectStatus(status),\n            deadline=deadline,\n            user_id=current_user.id\n        )\n        \n        db.session.add(project)\n        db.session.commit()\n        \n        # Log activity\n        log_activity(current_user.id, 'created', 'project', project.id, \n                    f'Created project \"{title}\"', project.id)\n        \n        flash(f'Project \"{title}\" created successfully!', 'success')\n        return redirect(url_for('project_detail', project_id=project.id))\n    \n    return render_template('project_form.html', \n                         title='New Project',\n                         project=None)\n\n\n@app.route('/project/<int:project_id>')\n@login_required\ndef project_detail(project_id):\n    \"\"\"View project details with tasks, files, collaborators, and comments\"\"\"\n    project = Project.query.get_or_404(project_id)\n    \n    # Check if user can access this project\n    if not project.can_user_access(current_user):\n        flash('You do not have permission to view this project.', 'error')\n        return redirect(url_for('index'))\n    \n    tasks = Task.query.filter_by(project_id=project_id).all()\n    notes = ProjectNote.query.filter_by(project_id=project_id).order_by(desc(ProjectNote.created_at)).all()\n    files = ProjectFile.query.filter_by(project_id=project_id).order_by(desc(ProjectFile.uploaded_at)).all()\n    comments = ProjectComment.query.filter_by(project_id=project_id).order_by(ProjectComment.created_at).all()\n    collaborators = project.get_collaborators()\n    \n    # Calculate task statistics\n    total_tasks = len(tasks)\n    completed_tasks = len([t for t in tasks if t.status == TaskStatus.DONE])\n    progress_percentage = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0\n    \n    # Get recent activity\n    recent_activity = ActivityLog.query.filter_by(project_id=project_id)\\\n        .order_by(desc(ActivityLog.created_at)).limit(10).all()\n    \n    # Forms\n    file_form = FileUploadForm()\n    comment_form = CommentForm()\n    invite_form = CollaboratorInviteForm()\n    \n    # Format file sizes\n    for file in files:\n        file.formatted_size = format_file_size(file.file_size)\n        file.icon = get_file_icon(file.file_type)\n    \n    return render_template('project_detail.html', \n                         project=project,\n                         tasks=tasks,\n                         notes=notes,\n                         files=files,\n                         comments=comments,\n                         collaborators=collaborators,\n                         recent_activity=recent_activity,\n                         total_tasks=total_tasks,\n                         completed_tasks=completed_tasks,\n                         progress_percentage=progress_percentage,\n                         file_form=file_form,\n                         comment_form=comment_form,\n                         invite_form=invite_form,\n                         today=datetime.utcnow())\n\n\n# Continue with other project routes...\n@app.route('/project/<int:project_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_project(project_id):\n    \"\"\"Edit an existing project\"\"\"\n    project = Project.query.filter_by(id=project_id, user_id=current_user.id).first()\n    if not project:\n        flash('Project not found.', 'error')\n        return redirect(url_for('index'))\n    \n    if request.method == 'POST':\n        title = request.form.get('title', '').strip()\n        description = request.form.get('description', '').strip()\n        course = request.form.get('course', '').strip()\n        status = request.form.get('status', ProjectStatus.NOT_STARTED.value)\n        deadline_str = request.form.get('deadline', '').strip()\n        \n        # Validation\n        if not title:\n            flash('Project title is required.', 'error')\n            return render_template('project_form.html', \n                                 title='Edit Project',\n                                 project=project,\n                                 form_data=request.form)\n        \n        deadline = None\n        if deadline_str:\n            try:\n                deadline = datetime.fromisoformat(deadline_str)\n            except ValueError:\n                flash('Invalid deadline format.', 'error')\n                return render_template('project_form.html', \n                                     title='Edit Project',\n                                     project=project,\n                                     form_data=request.form)\n        \n        # Update project\n        project.title = title\n        project.description = description\n        project.course = course\n        project.status = ProjectStatus(status)\n        project.deadline = deadline\n        project.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        # Log activity\n        log_activity(current_user.id, 'updated', 'project', project_id, \n                    f'Updated project \"{title}\"', project_id)\n        \n        flash(f'Project \"{title}\" updated successfully!', 'success')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    return render_template('project_form.html', \n                         title='Edit Project',\n                         project=project)\n\n\n@app.route('/project/<int:project_id>/delete', methods=['POST'])\n@login_required\ndef delete_project(project_id):\n    \"\"\"Delete a project and all its tasks\"\"\"\n    project = Project.query.filter_by(id=project_id, user_id=current_user.id).first()\n    if not project:\n        flash('Project not found.', 'error')\n        return redirect(url_for('index'))\n    \n    # Delete project (cascades to tasks and notes)\n    project_title = project.title\n    db.session.delete(project)\n    db.session.commit()\n    \n    flash(f'Project \"{project_title}\" deleted successfully!', 'success')\n    return redirect(url_for('index'))\n\n\n# Task Management Routes\n@app.route('/project/<int:project_id>/task/new', methods=['POST'])\n@login_required\ndef new_task(project_id):\n    \"\"\"Create a new task for a project\"\"\"\n    project = Project.query.get_or_404(project_id)\n    if not project.can_user_edit(current_user):\n        flash('You do not have permission to add tasks to this project.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    title = request.form.get('title', '').strip()\n    description = request.form.get('description', '').strip()\n    priority = request.form.get('priority', Priority.MEDIUM.value)\n    due_date_str = request.form.get('due_date', '').strip()\n    \n    if not title:\n        flash('Task title is required.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    due_date = None\n    if due_date_str:\n        try:\n            due_date = datetime.fromisoformat(due_date_str)\n        except ValueError:\n            flash('Invalid due date format.', 'error')\n            return redirect(url_for('project_detail', project_id=project_id))\n    \n    # Create new task\n    task = Task(\n        project_id=project_id,\n        title=title,\n        description=description,\n        priority=Priority(priority),\n        due_date=due_date\n    )\n    \n    db.session.add(task)\n    db.session.commit()\n    flash(f'Task \"{title}\" created successfully!', 'success')\n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n@app.route('/task/<int:task_id>/update_status', methods=['POST'])\n@login_required\ndef update_task_status(task_id):\n    \"\"\"Update task status\"\"\"\n    task = Task.query.join(Project).filter(\n        Task.id == task_id,\n        Project.user_id == current_user.id\n    ).first()\n    \n    if not task:\n        flash('Task not found.', 'error')\n        return redirect(url_for('index'))\n    \n    new_status = request.form.get('status')\n    if new_status in [s.value for s in TaskStatus]:\n        task.status = TaskStatus(new_status)\n        task.updated_at = datetime.utcnow()\n        db.session.commit()\n        flash('Task status updated successfully!', 'success')\n    else:\n        flash('Invalid status.', 'error')\n    \n    return redirect(url_for('project_detail', project_id=task.project_id))\n\n\n@app.route('/task/<int:task_id>/delete', methods=['POST'])\n@login_required\ndef delete_task(task_id):\n    \"\"\"Delete a task\"\"\"\n    task = Task.query.join(Project).filter(\n        Task.id == task_id,\n        Project.user_id == current_user.id\n    ).first()\n    \n    if not task:\n        flash('Task not found.', 'error')\n        return redirect(url_for('index'))\n    \n    project_id = task.project_id\n    db.session.delete(task)\n    db.session.commit()\n    \n    flash('Task deleted successfully!', 'success')\n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n# Study Session Routes\n@app.route('/project/<int:project_id>/study', methods=['POST'])\n@login_required\ndef log_study_session(project_id):\n    \"\"\"Log a study session for a project\"\"\"\n    project = Project.query.filter_by(id=project_id, user_id=current_user.id).first()\n    if not project:\n        flash('Project not found.', 'error')\n        return redirect(url_for('index'))\n    \n    duration = request.form.get('duration', type=int)\n    description = request.form.get('description', '').strip()\n    \n    if not duration or duration <= 0:\n        flash('Please enter a valid study duration.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    study_session = StudySession(\n        project_id=project_id,\n        user_id=current_user.id,\n        duration_minutes=duration,\n        description=description\n    )\n    \n    db.session.add(study_session)\n    db.session.commit()\n    flash(f'Study session logged: {duration} minutes', 'success')\n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n# Removed duplicate study_analytics function\n\n\n# Project Notes Routes\n@app.route('/project/<int:project_id>/note/new', methods=['POST'])\n@login_required\ndef add_project_note(project_id):\n    \"\"\"Add a note to a project\"\"\"\n    project = Project.query.filter_by(id=project_id, user_id=current_user.id).first()\n    if not project:\n        flash('Project not found.', 'error')\n        return redirect(url_for('index'))\n    \n    content = request.form.get('content', '').strip()\n    if not content:\n        flash('Note content is required.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    note = ProjectNote(\n        project_id=project_id,\n        content=content\n    )\n    \n    db.session.add(note)\n    db.session.commit()\n    flash('Note added successfully!', 'success')\n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n@app.route('/note/<int:note_id>/delete', methods=['POST'])\n@login_required\ndef delete_project_note(note_id):\n    \"\"\"Delete a project note\"\"\"\n    note = ProjectNote.query.join(Project).filter(\n        ProjectNote.id == note_id,\n        Project.user_id == current_user.id\n    ).first()\n    \n    if not note:\n        flash('Note not found.', 'error')\n        return redirect(url_for('index'))\n    \n    project_id = note.project_id\n    db.session.delete(note)\n    db.session.commit()\n    \n    flash('Note deleted successfully!', 'success')\n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n# Course Management Routes\n@app.route('/courses')\n@login_required\ndef manage_courses():\n    \"\"\"Manage user courses\"\"\"\n    courses = Course.query.filter_by(user_id=current_user.id).order_by(Course.year.desc(), Course.semester).all()\n    return render_template('courses.html', courses=courses)\n\n\n@app.route('/course/new', methods=['POST'])\n@login_required\ndef add_course():\n    \"\"\"Add a new course\"\"\"\n    name = request.form.get('name', '').strip()\n    code = request.form.get('code', '').strip()\n    semester = request.form.get('semester', '').strip()\n    year = request.form.get('year', type=int)\n    instructor = request.form.get('instructor', '').strip()\n    credits = request.form.get('credits', type=int)\n    \n    if not name:\n        flash('Course name is required.', 'error')\n        return redirect(url_for('manage_courses'))\n    \n    course = Course(\n        name=name,\n        code=code,\n        semester=semester,\n        year=year,\n        instructor=instructor,\n        credits=credits,\n        user_id=current_user.id\n    )\n    \n    db.session.add(course)\n    db.session.commit()\n    flash('Course added successfully!', 'success')\n    return redirect(url_for('manage_courses'))\n\n\n# Profile and Settings\n@app.route('/profile')\n@login_required\ndef profile():\n    \"\"\"View user profile and statistics\"\"\"\n    # Get user statistics\n    total_projects = Project.query.filter_by(user_id=current_user.id).count()\n    completed_projects = Project.query.filter_by(\n        user_id=current_user.id,\n        status=ProjectStatus.COMPLETED\n    ).count()\n    \n    total_tasks = db.session.query(Task).join(Project).filter(\n        Project.user_id == current_user.id\n    ).count()\n    \n    completed_tasks = db.session.query(Task).join(Project).filter(\n        Project.user_id == current_user.id,\n        Task.status == TaskStatus.DONE\n    ).count()\n    \n    total_study_time = db.session.query(func.sum(StudySession.duration_minutes)).filter_by(\n        user_id=current_user.id\n    ).scalar() or 0\n    \n    return render_template('profile.html',\n                         total_projects=total_projects,\n                         completed_projects=completed_projects,\n                         total_tasks=total_tasks,\n                         completed_tasks=completed_tasks,\n                         total_study_time=total_study_time)\n\n\n# File management routes\n@app.route('/project/<int:project_id>/upload', methods=['POST'])\n@login_required\ndef upload_file(project_id):\n    \"\"\"Upload file to project\"\"\"\n    project = Project.query.get_or_404(project_id)\n    \n    if not project.can_user_edit(current_user):\n        flash('You do not have permission to upload files to this project.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    form = FileUploadForm()\n    if form.validate_on_submit():\n        try:\n            file_info = save_uploaded_file(form.file.data, project_id, current_user.id)\n            if file_info:\n                # Save file record to database\n                project_file = ProjectFile(\n                    filename=file_info['filename'],\n                    original_filename=file_info['original_filename'],\n                    file_size=file_info['file_size'],\n                    file_type=file_info['file_type'],\n                    file_path=file_info['file_path'],\n                    project_id=project_id,\n                    uploaded_by=current_user.id\n                )\n                \n                db.session.add(project_file)\n                db.session.commit()\n                \n                # Log activity\n                log_activity(current_user.id, 'uploaded', 'file', project_file.id,\n                           f'Uploaded file \"{file_info[\"original_filename\"]}\"', project_id)\n                \n                flash(f'File \"{file_info[\"original_filename\"]}\" uploaded successfully!', 'success')\n            else:\n                flash('File upload failed.', 'error')\n                \n        except ValueError as e:\n            flash(str(e), 'error')\n        except Exception as e:\n            flash('An error occurred while uploading the file.', 'error')\n            print(f\"Upload error: {e}\")\n    \n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n@app.route('/project/<int:project_id>/file/<int:file_id>/download')\n@login_required\ndef download_file(project_id, file_id):\n    \"\"\"Download project file\"\"\"\n    project = Project.query.get_or_404(project_id)\n    if not project.can_user_access(current_user):\n        flash('You do not have permission to access this project.', 'error')\n        return redirect(url_for('index'))\n    \n    file = ProjectFile.query.filter_by(id=file_id, project_id=project_id).first_or_404()\n    \n    try:\n        return send_file(file.file_path, \n                        download_name=file.original_filename,\n                        as_attachment=True)\n    except FileNotFoundError:\n        flash('File not found.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n\n\n@app.route('/project/<int:project_id>/file/<int:file_id>/delete', methods=['POST'])\n@login_required\ndef delete_file(project_id, file_id):\n    \"\"\"Delete project file\"\"\"\n    project = Project.query.get_or_404(project_id)\n    if not project.can_user_edit(current_user):\n        flash('You do not have permission to delete files from this project.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    file = ProjectFile.query.filter_by(id=file_id, project_id=project_id).first_or_404()\n    \n    try:\n        # Delete physical file\n        if os.path.exists(file.file_path):\n            os.remove(file.file_path)\n        \n        # Delete database record\n        db.session.delete(file)\n        db.session.commit()\n        \n        # Log activity\n        log_activity(current_user.id, 'deleted', 'file', file_id,\n                   f'Deleted file \"{file.original_filename}\"', project_id)\n        \n        flash('File deleted successfully!', 'success')\n    except Exception as e:\n        flash('An error occurred while deleting the file.', 'error')\n        print(f\"Delete error: {e}\")\n    \n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n# Collaboration routes\n@app.route('/project/<int:project_id>/invite', methods=['POST'])\n@login_required\ndef invite_collaborator(project_id):\n    \"\"\"Invite collaborator to project\"\"\"\n    project = Project.query.get_or_404(project_id)\n    \n    # Only owner can invite collaborators\n    if project.user_id != current_user.id:\n        flash('Only the project owner can invite collaborators.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    form = CollaboratorInviteForm()\n    if form.validate_on_submit():\n        # Find user by email\n        invited_user = User.query.filter_by(email=form.email.data).first()\n        if not invited_user:\n            flash('User with this email address not found.', 'error')\n            return redirect(url_for('project_detail', project_id=project_id))\n        \n        # Check if already a collaborator\n        existing = ProjectCollaborator.query.filter_by(\n            project_id=project_id, user_id=invited_user.id).first()\n        if existing:\n            flash('This user is already a collaborator on this project.', 'error')\n            return redirect(url_for('project_detail', project_id=project_id))\n        \n        # Create collaboration invitation\n        collaboration = ProjectCollaborator(\n            project_id=project_id,\n            user_id=invited_user.id,\n            role=form.role.data,\n            status='pending'\n        )\n        \n        db.session.add(collaboration)\n        db.session.commit()\n        \n        # Log activity\n        log_activity(current_user.id, 'invited', 'collaborator', invited_user.id,\n                   f'Invited {invited_user.email} as {form.role.data}', project_id)\n        \n        flash(f'Invitation sent to {form.email.data}!', 'success')\n    \n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n@app.route('/collaboration/<int:collab_id>/accept')\n@login_required\ndef accept_collaboration(collab_id):\n    \"\"\"Accept collaboration invitation\"\"\"\n    collaboration = ProjectCollaborator.query.get_or_404(collab_id)\n    \n    if collaboration.user_id != current_user.id:\n        flash('You can only accept your own invitations.', 'error')\n        return redirect(url_for('index'))\n    \n    collaboration.status = 'accepted'\n    collaboration.accepted_at = datetime.utcnow()\n    db.session.commit()\n    \n    # Log activity\n    log_activity(current_user.id, 'accepted', 'collaboration', collab_id,\n               f'Accepted collaboration invitation', collaboration.project_id)\n    \n    flash('Collaboration invitation accepted!', 'success')\n    return redirect(url_for('project_detail', project_id=collaboration.project_id))\n\n\n@app.route('/collaboration/<int:collab_id>/decline')\n@login_required\ndef decline_collaboration(collab_id):\n    \"\"\"Decline collaboration invitation\"\"\"\n    collaboration = ProjectCollaborator.query.get_or_404(collab_id)\n    \n    if collaboration.user_id != current_user.id:\n        flash('You can only decline your own invitations.', 'error')\n        return redirect(url_for('index'))\n    \n    collaboration.status = 'declined'\n    db.session.commit()\n    \n    flash('Collaboration invitation declined.', 'info')\n    return redirect(url_for('index'))\n\n\n# Comment routes\n@app.route('/project/<int:project_id>/comment', methods=['POST'])\n@login_required\ndef add_comment(project_id):\n    \"\"\"Add comment to project\"\"\"\n    project = Project.query.get_or_404(project_id)\n    \n    if not project.can_user_access(current_user):\n        flash('You do not have permission to comment on this project.', 'error')\n        return redirect(url_for('project_detail', project_id=project_id))\n    \n    form = CommentForm()\n    if form.validate_on_submit():\n        comment = ProjectComment(\n            content=form.content.data,\n            project_id=project_id,\n            user_id=current_user.id\n        )\n        \n        db.session.add(comment)\n        db.session.commit()\n        \n        # Log activity\n        log_activity(current_user.id, 'commented', 'project', project_id,\n                   'Added a comment', project_id)\n        \n        flash('Comment added successfully!', 'success')\n    \n    return redirect(url_for('project_detail', project_id=project_id))\n\n\n# Search routes\n@app.route('/search')\n@login_required\ndef search():\n    \"\"\"Search projects, tasks, and collaborators\"\"\"\n    form = SearchForm()\n    results = {\n        'projects': [],\n        'tasks': [],\n        'collaborators': [],\n        'files': []\n    }\n    \n    if request.args.get('query'):\n        query = request.args.get('query')\n        filter_type = request.args.get('filter_type', 'all')\n        \n        # Search projects user owns or collaborates on\n        accessible_projects = db.session.query(Project.id).filter(\n            or_(\n                Project.user_id == current_user.id,\n                Project.id.in_(\n                    db.session.query(ProjectCollaborator.project_id)\n                    .filter(and_(\n                        ProjectCollaborator.user_id == current_user.id,\n                        ProjectCollaborator.status == 'accepted'\n                    ))\n                )\n            )\n        ).subquery()\n        \n        if filter_type in ['all', 'projects']:\n            results['projects'] = Project.query.filter(\n                and_(\n                    Project.id.in_(accessible_projects),\n                    or_(\n                        Project.title.ilike(f'%{query}%'),\n                        Project.description.ilike(f'%{query}%'),\n                        Project.course.ilike(f'%{query}%')\n                    )\n                )\n            ).all()\n        \n        if filter_type in ['all', 'tasks']:\n            results['tasks'] = Task.query.filter(\n                and_(\n                    Task.project_id.in_(accessible_projects),\n                    or_(\n                        Task.title.ilike(f'%{query}%'),\n                        Task.description.ilike(f'%{query}%')\n                    )\n                )\n            ).all()\n        \n        if filter_type in ['all', 'files']:\n            results['files'] = ProjectFile.query.filter(\n                and_(\n                    ProjectFile.project_id.in_(accessible_projects),\n                    ProjectFile.original_filename.ilike(f'%{query}%')\n                )\n            ).all()\n    \n    return render_template('search.html', form=form, results=results, query=query if 'query' in locals() else '')\n\n\n# Study Analytics and Timer Routes\n@app.route('/analytics')\n@login_required\ndef analytics():\n    \"\"\"Study analytics dashboard with visualizations\"\"\"\n    # Get all study sessions for the user\n    sessions = StudySession.query.filter_by(user_id=current_user.id).order_by(desc(StudySession.created_at)).all()\n    \n    # Calculate analytics data\n    total_sessions = len(sessions)\n    total_minutes = sum(session.duration_minutes for session in sessions)\n    avg_session_length = total_minutes / total_sessions if total_sessions > 0 else 0\n    \n    # Weekly data for chart (last 7 days)\n    from datetime import timedelta\n    week_data = []\n    today = datetime.utcnow().date()\n    \n    for i in range(6, -1, -1):  # Last 7 days\n        day = today - timedelta(days=i)\n        day_sessions = [s for s in sessions if s.created_at.date() == day]\n        day_minutes = sum(s.duration_minutes for s in day_sessions)\n        week_data.append({\n            'date': day.strftime('%Y-%m-%d'),\n            'day': day.strftime('%a'),\n            'minutes': day_minutes,\n            'hours': round(day_minutes / 60, 1)\n        })\n    \n    # Project breakdown\n    project_stats = {}\n    for session in sessions:\n        project = session.project\n        if project:\n            if project.title not in project_stats:\n                project_stats[project.title] = {'minutes': 0, 'sessions': 0}\n            project_stats[project.title]['minutes'] += session.duration_minutes\n            project_stats[project.title]['sessions'] += 1\n    \n    # Sort by minutes studied\n    project_stats = dict(sorted(project_stats.items(), key=lambda x: x[1]['minutes'], reverse=True))\n    \n    return render_template('study_analytics.html',\n                         sessions=sessions[:10],  # Recent 10 sessions\n                         total_sessions=total_sessions,\n                         total_minutes=total_minutes,\n                         total_hours=round(total_minutes / 60, 1),\n                         avg_session_length=round(avg_session_length),\n                         week_data=week_data,\n                         project_stats=project_stats)\n\n\n@app.route('/study-timer')\n@login_required\ndef study_timer():\n    \"\"\"Study timer page\"\"\"\n    projects = Project.query.filter_by(user_id=current_user.id).all()\n    active_session = StudySession.query.filter_by(user_id=current_user.id, is_active=True).first()\n    \n    return render_template('study_timer.html', \n                         projects=projects,\n                         active_session=active_session)\n\n\n@app.route('/api/study-session/start', methods=['POST'])\n@login_required\ndef start_study_session():\n    \"\"\"Start a new study session\"\"\"\n    project_id = request.json.get('project_id')\n    \n    # Check if there's already an active session\n    active_session = StudySession.query.filter_by(user_id=current_user.id, is_active=True).first()\n    if active_session:\n        return jsonify({'error': 'You already have an active study session'}), 400\n    \n    # Create new session\n    session = StudySession(\n        user_id=current_user.id,\n        project_id=project_id,\n        start_time=datetime.utcnow(),\n        is_active=True,\n        duration_minutes=0\n    )\n    \n    db.session.add(session)\n    db.session.commit()\n    \n    return jsonify({\n        'success': True,\n        'session_id': session.id,\n        'start_time': session.start_time.isoformat()\n    })\n\n\n@app.route('/api/study-session/stop', methods=['POST'])\n@login_required\ndef stop_study_session():\n    \"\"\"Stop the active study session\"\"\"\n    session_id = request.json.get('session_id')\n    notes = request.json.get('notes', '')\n    \n    session = StudySession.query.filter_by(id=session_id, user_id=current_user.id, is_active=True).first()\n    if not session:\n        return jsonify({'error': 'No active session found'}), 404\n    \n    # Calculate duration\n    end_time = datetime.utcnow()\n    duration_seconds = (end_time - session.start_time).total_seconds()\n    duration_minutes = int(duration_seconds / 60)\n    \n    # Update session\n    session.end_time = end_time\n    session.duration_minutes = duration_minutes\n    session.description = notes\n    session.is_active = False\n    \n    db.session.commit()\n    \n    # Log activity if project is set\n    if session.project_id:\n        log_activity(current_user.id, 'studied', 'project', session.project_id,\n                   f'Studied for {session.get_duration_formatted()}', session.project_id)\n    \n    return jsonify({\n        'success': True,\n        'duration_minutes': duration_minutes,\n        'duration_formatted': session.get_duration_formatted()\n    })\n\n\n@app.route('/api/study-session/pause', methods=['POST'])\n@login_required \ndef pause_study_session():\n    \"\"\"Pause/resume the active study session\"\"\"\n    session_id = request.json.get('session_id')\n    \n    session = StudySession.query.filter_by(id=session_id, user_id=current_user.id, is_active=True).first()\n    if not session:\n        return jsonify({'error': 'No active session found'}), 404\n    \n    # For now, we'll just return success - pause/resume can be handled on frontend\n    return jsonify({'success': True})\n\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('base.html', error_message=\"Page not found\"), 404\n\n\n@app.errorhandler(500)\ndef internal_error(error):\n    return render_template('base.html', error_message=\"Internal server error\"), 500","size_bytes":35977},"utils.py":{"content":"import os\nimport secrets\nfrom datetime import datetime\nfrom werkzeug.utils import secure_filename\nfrom flask import current_app\nfrom PIL import Image\n\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in current_app.config['ALLOWED_EXTENSIONS']\n\n\ndef generate_filename(original_filename):\n    \"\"\"Generate a unique filename while preserving extension\"\"\"\n    ext = original_filename.rsplit('.', 1)[1].lower() if '.' in original_filename else ''\n    unique_filename = secrets.token_urlsafe(16) + '.' + ext if ext else secrets.token_urlsafe(16)\n    return unique_filename\n\n\ndef save_uploaded_file(file, project_id, user_id):\n    \"\"\"Save uploaded file and return file info\"\"\"\n    if not file or file.filename == '':\n        return None\n    \n    if not allowed_file(file.filename):\n        raise ValueError(\"File type not allowed\")\n    \n    # Generate unique filename\n    secure_name = secure_filename(file.filename)\n    unique_filename = generate_filename(secure_name)\n    \n    # Create project-specific directory\n    project_dir = os.path.join(current_app.config['UPLOAD_FOLDER'], f'project_{project_id}')\n    os.makedirs(project_dir, exist_ok=True)\n    \n    file_path = os.path.join(project_dir, unique_filename)\n    \n    # Save file\n    file.save(file_path)\n    \n    # Get file info\n    file_size = os.path.getsize(file_path)\n    file_type = file.content_type or 'application/octet-stream'\n    \n    # Create thumbnail for images\n    if file_type.startswith('image/'):\n        try:\n            create_thumbnail(file_path, project_dir)\n        except Exception as e:\n            print(f\"Thumbnail creation failed: {e}\")\n    \n    return {\n        'filename': unique_filename,\n        'original_filename': secure_name,\n        'file_path': file_path,\n        'file_size': file_size,\n        'file_type': file_type\n    }\n\n\ndef create_thumbnail(file_path, project_dir):\n    \"\"\"Create thumbnail for image files\"\"\"\n    try:\n        with Image.open(file_path) as img:\n            img.thumbnail((200, 200), Image.Resampling.LANCZOS)\n            \n            # Save thumbnail\n            filename = os.path.basename(file_path)\n            name, ext = os.path.splitext(filename)\n            thumb_filename = f\"{name}_thumb{ext}\"\n            thumb_path = os.path.join(project_dir, thumb_filename)\n            \n            img.save(thumb_path, optimize=True, quality=85)\n            return thumb_path\n    except Exception as e:\n        print(f\"Thumbnail creation failed: {e}\")\n        return None\n\n\ndef format_file_size(size_bytes):\n    \"\"\"Format file size in human readable format\"\"\"\n    if size_bytes == 0:\n        return \"0 B\"\n    \n    for unit in ['B', 'KB', 'MB', 'GB']:\n        if size_bytes < 1024.0:\n            return f\"{size_bytes:.1f} {unit}\"\n        size_bytes /= 1024.0\n    \n    return f\"{size_bytes:.1f} TB\"\n\n\ndef get_file_icon(file_type):\n    \"\"\"Get appropriate icon for file type\"\"\"\n    if file_type.startswith('image/'):\n        return 'image'\n    elif file_type.startswith('video/'):\n        return 'video'\n    elif file_type.startswith('audio/'):\n        return 'music'\n    elif 'pdf' in file_type:\n        return 'file-text'\n    elif any(x in file_type for x in ['document', 'word']):\n        return 'file-text'\n    elif any(x in file_type for x in ['spreadsheet', 'excel']):\n        return 'grid'\n    elif any(x in file_type for x in ['presentation', 'powerpoint']):\n        return 'monitor'\n    elif 'zip' in file_type or 'rar' in file_type:\n        return 'archive'\n    else:\n        return 'file'\n\n\ndef log_activity(user_id, action, entity_type, entity_id, description=None, project_id=None):\n    \"\"\"Log user activity\"\"\"\n    from app import db\n    from models import ActivityLog\n    \n    activity = ActivityLog(\n        user_id=user_id,\n        action=action,\n        entity_type=entity_type,\n        entity_id=entity_id,\n        description=description,\n        project_id=project_id\n    )\n    \n    db.session.add(activity)\n    db.session.commit()\n    return activity","size_bytes":4079},"static/css/style.css":{"content":"/* Custom styles for Workflow */\n\n/* Override minimal necessary Bootstrap styles */\n:root {\n    --project-primary: var(--bs-primary);\n    --project-success: var(--bs-success);\n    --project-warning: var(--bs-warning);\n    --project-danger: var(--bs-danger);\n    --project-info: var(--bs-info);\n}\n\n/* Body and general layout */\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    line-height: 1.6;\n}\n\n/* Card enhancements */\n.card {\n    border: none;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n    transition: box-shadow 0.15s ease-in-out;\n}\n\n.card:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n/* Progress bar custom styling */\n.progress {\n    height: 0.75rem;\n    border-radius: 0.5rem;\n}\n\n.progress-bar {\n    border-radius: 0.5rem;\n    transition: width 0.3s ease;\n}\n\n/* Status badges */\n.badge {\n    font-weight: 500;\n    letter-spacing: 0.025em;\n}\n\n/* List group items */\n.list-group-item {\n    border: 1px solid rgba(var(--bs-border-color-rgb), 0.125);\n    margin-bottom: 0.25rem;\n    border-radius: 0.375rem;\n}\n\n.list-group-item:last-child {\n    margin-bottom: 0;\n}\n\n/* Form enhancements */\n.form-control:focus,\n.form-select:focus {\n    border-color: var(--project-primary);\n    box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);\n}\n\n.is-invalid {\n    border-color: var(--project-danger) !important;\n    box-shadow: 0 0 0 0.2rem rgba(var(--bs-danger-rgb), 0.25) !important;\n}\n\n/* Button enhancements */\n.btn {\n    border-radius: 0.375rem;\n    font-weight: 500;\n    transition: all 0.15s ease-in-out;\n}\n\n.btn-sm {\n    border-radius: 0.25rem;\n}\n\n/* Dropdown menu styling */\n.dropdown-menu {\n    border: none;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175);\n    border-radius: 0.5rem;\n}\n\n.dropdown-item:hover,\n.dropdown-item:focus {\n    background-color: rgba(var(--bs-primary-rgb), 0.1);\n}\n\n.dropdown-item.active {\n    background-color: var(--project-primary);\n}\n\n/* Modal enhancements */\n.modal-content {\n    border: none;\n    border-radius: 0.5rem;\n    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175);\n}\n\n.modal-header {\n    border-bottom: 1px solid rgba(var(--bs-border-color-rgb), 0.125);\n}\n\n.modal-footer {\n    border-top: 1px solid rgba(var(--bs-border-color-rgb), 0.125);\n}\n\n/* Navigation bar */\n.navbar-brand {\n    font-weight: 600;\n    font-size: 1.25rem;\n}\n\n/* Footer styling */\nfooter {\n    margin-top: auto;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .card-body {\n        padding: 1rem;\n    }\n    \n    .btn-group-vertical .btn {\n        margin-bottom: 0.25rem;\n    }\n    \n    .d-flex.gap-2 {\n        flex-direction: column;\n    }\n    \n    .d-flex.gap-2 > * {\n        margin-bottom: 0.5rem;\n    }\n    \n    .d-flex.gap-2 > *:last-child {\n        margin-bottom: 0;\n    }\n}\n\n/* Animation and transitions */\n.fade-in {\n    animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n/* Loading states */\n.btn.loading {\n    pointer-events: none;\n    opacity: 0.6;\n}\n\n.btn.loading::after {\n    content: \"\";\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    margin-left: 0.5rem;\n    border: 2px solid currentColor;\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: spin 0.75s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Custom utility classes */\n.text-decoration-line-through {\n    text-decoration: line-through !important;\n}\n\n.cursor-pointer {\n    cursor: pointer !important;\n}\n\n/* Focus states for accessibility */\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: 2px solid var(--project-primary);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .card {\n        border: 2px solid var(--bs-border-color);\n    }\n    \n    .btn-outline-primary,\n    .btn-outline-secondary,\n    .btn-outline-success,\n    .btn-outline-warning,\n    .btn-outline-danger {\n        border-width: 2px;\n    }\n}\n\n/* Reduce motion for accessibility */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n","size_bytes":4356},"static/js/app.js":{"content":"// Workflow - Main JavaScript File\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize application\n    initializeApp();\n    \n    // Set up event listeners\n    setupEventListeners();\n    \n    // Initialize components\n    initializeComponents();\n});\n\n/**\n * Initialize the application\n */\nfunction initializeApp() {\n    console.log('Workflow initialized');\n    \n    // Set current date for comparisons\n    window.currentDate = new Date();\n    \n    // Initialize Feather icons\n    if (typeof feather !== 'undefined') {\n        feather.replace();\n    }\n    \n    // Auto-dismiss alerts after 5 seconds\n    setTimeout(function() {\n        const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n        alerts.forEach(function(alert) {\n            if (alert.classList.contains('show')) {\n                const bsAlert = new bootstrap.Alert(alert);\n                bsAlert.close();\n            }\n        });\n    }, 5000);\n}\n\n/**\n * Set up global event listeners\n */\nfunction setupEventListeners() {\n    // Form validation\n    setupFormValidation();\n    \n    // Confirmation dialogs\n    setupConfirmationDialogs();\n    \n    // Auto-save functionality\n    setupAutoSave();\n    \n    // Keyboard shortcuts\n    setupKeyboardShortcuts();\n    \n    // Loading states\n    setupLoadingStates();\n}\n\n/**\n * Initialize Bootstrap and custom components\n */\nfunction initializeComponents() {\n    // Initialize tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n    \n    // Initialize popovers\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function(popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n    \n    // Auto-focus first form input\n    const firstInput = document.querySelector('form input:not([type=\"hidden\"]):not([readonly])');\n    if (firstInput) {\n        firstInput.focus();\n    }\n}\n\n/**\n * Form validation setup\n */\nfunction setupFormValidation() {\n    const forms = document.querySelectorAll('form[novalidate]');\n    \n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(e) {\n            if (!form.checkValidity()) {\n                e.preventDefault();\n                e.stopPropagation();\n                \n                // Focus first invalid field\n                const firstInvalid = form.querySelector(':invalid');\n                if (firstInvalid) {\n                    firstInvalid.focus();\n                }\n            }\n            \n            form.classList.add('was-validated');\n        });\n        \n        // Real-time validation\n        const inputs = form.querySelectorAll('input, textarea, select');\n        inputs.forEach(function(input) {\n            input.addEventListener('blur', function() {\n                if (this.checkValidity()) {\n                    this.classList.remove('is-invalid');\n                    this.classList.add('is-valid');\n                } else {\n                    this.classList.remove('is-valid');\n                    this.classList.add('is-invalid');\n                }\n            });\n            \n            input.addEventListener('input', function() {\n                if (this.classList.contains('is-invalid') && this.checkValidity()) {\n                    this.classList.remove('is-invalid');\n                }\n            });\n        });\n    });\n}\n\n/**\n * Confirmation dialog setup\n */\nfunction setupConfirmationDialogs() {\n    const confirmButtons = document.querySelectorAll('[data-confirm]');\n    \n    confirmButtons.forEach(function(button) {\n        button.addEventListener('click', function(e) {\n            const message = this.getAttribute('data-confirm');\n            if (!confirm(message)) {\n                e.preventDefault();\n                return false;\n            }\n        });\n    });\n    \n    // Delete confirmations\n    const deleteButtons = document.querySelectorAll('button[type=\"submit\"]');\n    deleteButtons.forEach(function(button) {\n        if (button.textContent.includes('Delete') && !button.hasAttribute('data-confirm')) {\n            button.addEventListener('click', function(e) {\n                const itemName = this.getAttribute('data-item-name') || 'this item';\n                if (!confirm(`Are you sure you want to delete ${itemName}? This action cannot be undone.`)) {\n                    e.preventDefault();\n                    return false;\n                }\n            });\n        }\n    });\n}\n\n/**\n * Auto-save functionality for forms\n */\nfunction setupAutoSave() {\n    const autoSaveForms = document.querySelectorAll('form[data-autosave]');\n    \n    autoSaveForms.forEach(function(form) {\n        const formId = form.getAttribute('data-autosave') || 'default';\n        const inputs = form.querySelectorAll('input, textarea, select');\n        \n        // Load saved data\n        inputs.forEach(function(input) {\n            const savedValue = localStorage.getItem(`autosave_${formId}_${input.name}`);\n            if (savedValue && !input.value) {\n                input.value = savedValue;\n            }\n        });\n        \n        // Save data on change\n        inputs.forEach(function(input) {\n            input.addEventListener('input', debounce(function() {\n                localStorage.setItem(`autosave_${formId}_${input.name}`, input.value);\n            }, 500));\n        });\n        \n        // Clear saved data on successful submit\n        form.addEventListener('submit', function() {\n            inputs.forEach(function(input) {\n                localStorage.removeItem(`autosave_${formId}_${input.name}`);\n            });\n        });\n    });\n}\n\n/**\n * Keyboard shortcuts setup\n */\nfunction setupKeyboardShortcuts() {\n    document.addEventListener('keydown', function(e) {\n        // Ctrl+N or Cmd+N for new project\n        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {\n            e.preventDefault();\n            const newProjectBtn = document.querySelector('a[href*=\"project/new\"]');\n            if (newProjectBtn) {\n                newProjectBtn.click();\n            }\n        }\n        \n        // Escape to close modals\n        if (e.key === 'Escape') {\n            const openModal = document.querySelector('.modal.show');\n            if (openModal) {\n                const modalInstance = bootstrap.Modal.getInstance(openModal);\n                if (modalInstance) {\n                    modalInstance.hide();\n                }\n            }\n        }\n        \n        // Enter to submit forms (if not textarea)\n        if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {\n            const form = e.target.closest('form');\n            if (form && !e.target.closest('[data-no-enter-submit]')) {\n                const submitBtn = form.querySelector('button[type=\"submit\"]');\n                if (submitBtn) {\n                    submitBtn.click();\n                }\n            }\n        }\n    });\n}\n\n/**\n * Loading states for buttons and forms\n */\nfunction setupLoadingStates() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(function(form) {\n        form.addEventListener('submit', function() {\n            const submitBtn = form.querySelector('button[type=\"submit\"]');\n            if (submitBtn) {\n                submitBtn.classList.add('loading');\n                submitBtn.disabled = true;\n                \n                // Re-enable after 10 seconds as fallback\n                setTimeout(function() {\n                    submitBtn.classList.remove('loading');\n                    submitBtn.disabled = false;\n                }, 10000);\n            }\n        });\n    });\n    \n    // Loading states for action buttons\n    const actionButtons = document.querySelectorAll('[data-loading]');\n    actionButtons.forEach(function(button) {\n        button.addEventListener('click', function() {\n            this.classList.add('loading');\n            this.disabled = true;\n        });\n    });\n}\n\n/**\n * Utility Functions\n */\n\n/**\n * Debounce function to limit function calls\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n/**\n * Format date for display\n */\nfunction formatDate(date, options = {}) {\n    const defaultOptions = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        ...options\n    };\n    \n    return new Date(date).toLocaleDateString(undefined, defaultOptions);\n}\n\n/**\n * Format relative time (e.g., \"2 days ago\")\n */\nfunction formatRelativeTime(date) {\n    const now = new Date();\n    const past = new Date(date);\n    const diffTime = Math.abs(now - past);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n    if (diffDays < 365) return `${Math.ceil(diffDays / 30)} months ago`;\n    return `${Math.ceil(diffDays / 365)} years ago`;\n}\n\n/**\n * Show notification toast\n */\nfunction showNotification(message, type = 'info') {\n    const toast = document.createElement('div');\n    toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n    toast.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(toast);\n    \n    // Auto-remove after 4 seconds\n    setTimeout(function() {\n        if (toast.parentNode) {\n            toast.remove();\n        }\n    }, 4000);\n}\n\n/**\n * Calculate project progress\n */\nfunction calculateProgress(completed, total) {\n    if (total === 0) return 0;\n    return Math.round((completed / total) * 100);\n}\n\n/**\n * Check if date is overdue\n */\nfunction isOverdue(deadline, status = null) {\n    if (!deadline) return false;\n    if (status === 'Completed') return false;\n    \n    const now = new Date();\n    const due = new Date(deadline);\n    return due < now;\n}\n\n/**\n * Get status color class\n */\nfunction getStatusColorClass(status) {\n    const statusColors = {\n        'Not Started': 'secondary',\n        'In Progress': 'primary',\n        'On Hold': 'warning',\n        'Completed': 'success',\n        'To Do': 'info',\n        'Done': 'success'\n    };\n    \n    return `bg-${statusColors[status] || 'secondary'}`;\n}\n\n/**\n * Get priority color class\n */\nfunction getPriorityColorClass(priority) {\n    const priorityColors = {\n        'Low': 'info',\n        'Medium': 'warning',\n        'High': 'danger'\n    };\n    \n    return `bg-${priorityColors[priority] || 'secondary'}`;\n}\n\n// Export functions for global use\nwindow.ProjectTracker = {\n    showNotification,\n    formatDate,\n    formatRelativeTime,\n    calculateProgress,\n    isOverdue,\n    getStatusColorClass,\n    getPriorityColorClass,\n    debounce\n};\n\n// Page-specific initializations\nif (window.location.pathname === '/') {\n    // Dashboard specific code\n    initializeDashboard();\n} else if (window.location.pathname.includes('/project/')) {\n    // Project detail specific code\n    initializeProjectDetail();\n}\n\nfunction initializeDashboard() {\n    // Update any real-time elements\n    updateProjectCards();\n}\n\nfunction initializeProjectDetail() {\n    // Initialize task management features\n    setupTaskManagement();\n}\n\nfunction updateProjectCards() {\n    // Update overdue indicators and progress bars\n    const projectCards = document.querySelectorAll('[data-project-id]');\n    projectCards.forEach(function(card) {\n        // Add any real-time updates here\n    });\n}\n\nfunction setupTaskManagement() {\n    // Task-specific functionality\n    const taskItems = document.querySelectorAll('.list-group-item[data-task-id]');\n    taskItems.forEach(function(item) {\n        // Add drag-and-drop or other task management features here\n    });\n}\n","size_bytes":12249},"static/js/notifications.js":{"content":"// Desktop Notifications for Workflow\n// Provides study session reminders, deadline alerts, and task completion notifications\n\nclass NotificationManager {\n    constructor() {\n        this.permission = Notification.permission;\n        this.enabled = false;\n        this.init();\n    }\n\n    async init() {\n        // Check if notifications are supported\n        if (!('Notification' in window)) {\n            console.log('Desktop notifications not supported');\n            return;\n        }\n\n        // Request permission if needed\n        if (this.permission === 'default') {\n            this.permission = await Notification.requestPermission();\n        }\n\n        this.enabled = this.permission === 'granted';\n        \n        if (this.enabled) {\n            console.log('Desktop notifications enabled');\n        }\n    }\n\n    canNotify() {\n        return this.enabled && 'Notification' in window;\n    }\n\n    show(title, options = {}) {\n        if (!this.canNotify()) return null;\n\n        const defaultOptions = {\n            icon: '/static/favicon.ico',\n            badge: '/static/favicon.ico',\n            tag: 'academic-tracker',\n            ...options\n        };\n\n        const notification = new Notification(title, defaultOptions);\n        \n        // Auto-close after 8 seconds\n        setTimeout(() => notification.close(), 8000);\n        \n        return notification;\n    }\n\n    // Study session notifications\n    showStudyReminder(message, duration) {\n        return this.show(`üìö Study Session - ${duration}`, {\n            body: message,\n            tag: 'study-session',\n            requireInteraction: true\n        });\n    }\n\n    showStudyComplete(duration) {\n        return this.show('üéâ Study Session Complete!', {\n            body: `Great work! You studied for ${duration}.`,\n            tag: 'study-complete'\n        });\n    }\n\n    // Deadline notifications\n    showDeadlineAlert(project, daysLeft) {\n        const urgency = daysLeft <= 1 ? 'üö®' : daysLeft <= 3 ? '‚ö†Ô∏è' : 'üìÖ';\n        const dayText = daysLeft === 1 ? 'day' : 'days';\n        \n        return this.show(`${urgency} Project Deadline`, {\n            body: `\"${project}\" is due in ${daysLeft} ${dayText}!`,\n            tag: 'deadline-alert',\n            requireInteraction: daysLeft <= 1\n        });\n    }\n\n    // Task completion notification\n    showTaskComplete(taskName) {\n        return this.show('‚úÖ Task Completed', {\n            body: `Great work! \"${taskName}\" is now complete.`,\n            tag: 'task-complete'\n        });\n    }\n\n    // Project completion notification\n    showProjectComplete(projectName) {\n        return this.show('üèÜ Project Completed!', {\n            body: `Congratulations! \"${projectName}\" has been completed.`,\n            tag: 'project-complete',\n            requireInteraction: true\n        });\n    }\n\n    // Collaboration notifications\n    showCollaboratorInvite(projectName, inviterName) {\n        return this.show('üë• New Collaboration Invite', {\n            body: `${inviterName} invited you to collaborate on \"${projectName}\"`,\n            tag: 'collaboration'\n        });\n    }\n\n    showNewComment(projectName, commenterName) {\n        return this.show('üí¨ New Comment', {\n            body: `${commenterName} commented on \"${projectName}\"`,\n            tag: 'comment'\n        });\n    }\n}\n\n// Study Session Timer with Notifications\nclass StudySessionNotifier {\n    constructor(notificationManager) {\n        this.notifications = notificationManager;\n        this.sessionTimer = null;\n        this.reminderIntervals = [];\n        this.sessionStart = null;\n        this.projectName = '';\n        this.isActive = false;\n    }\n\n    startSession(projectName) {\n        this.projectName = projectName || 'General Study';\n        this.sessionStart = Date.now();\n        this.isActive = true;\n        this.clearAllTimers();\n\n        // Show start notification\n        this.notifications.show('üöÄ Study Session Started', {\n            body: `Started studying \"${this.projectName}\". Good luck!`,\n            tag: 'session-start'\n        });\n\n        // Set up reminders every 25 minutes (Pomodoro technique)\n        const pomodoroReminder = setInterval(() => {\n            if (!this.isActive) return;\n            \n            const elapsed = Math.floor((Date.now() - this.sessionStart) / 60000);\n            if (elapsed > 0 && elapsed % 25 === 0) {\n                this.notifications.showStudyReminder(\n                    `You've been studying \"${this.projectName}\" for ${elapsed} minutes. Consider a 5-minute break!`,\n                    `${elapsed} minutes`\n                );\n            }\n        }, 60000); // Check every minute\n\n        // Set up break reminder after 50 minutes\n        const breakReminder = setTimeout(() => {\n            if (this.isActive) {\n                this.notifications.show('‚òï Break Time!', {\n                    body: `You've been studying for 50 minutes. Time for a longer break!`,\n                    tag: 'break-reminder',\n                    requireInteraction: true\n                });\n            }\n        }, 50 * 60 * 1000); // 50 minutes\n\n        this.reminderIntervals.push(pomodoroReminder);\n        this.reminderIntervals.push(breakReminder);\n    }\n\n    stopSession() {\n        if (!this.isActive) return;\n\n        this.isActive = false;\n        this.clearAllTimers();\n\n        if (this.sessionStart) {\n            const duration = Math.floor((Date.now() - this.sessionStart) / 60000);\n            const hours = Math.floor(duration / 60);\n            const minutes = duration % 60;\n            \n            let durationText = '';\n            if (hours > 0) {\n                durationText = `${hours}h ${minutes}m`;\n            } else {\n                durationText = `${minutes} minutes`;\n            }\n            \n            this.notifications.showStudyComplete(durationText);\n        }\n\n        this.sessionStart = null;\n        this.projectName = '';\n    }\n\n    pauseSession() {\n        this.isActive = false;\n        this.clearAllTimers();\n        \n        this.notifications.show('‚è∏Ô∏è Study Session Paused', {\n            body: 'Session paused. Resume when you\\'re ready!',\n            tag: 'session-pause'\n        });\n    }\n\n    resumeSession() {\n        if (!this.sessionStart) return;\n        \n        this.isActive = true;\n        this.notifications.show('‚ñ∂Ô∏è Study Session Resumed', {\n            body: `Back to studying \"${this.projectName}\"!`,\n            tag: 'session-resume'\n        });\n    }\n\n    clearAllTimers() {\n        this.reminderIntervals.forEach(timer => {\n            if (typeof timer === 'number') {\n                clearInterval(timer);\n                clearTimeout(timer);\n            }\n        });\n        this.reminderIntervals = [];\n    }\n}\n\n// Deadline Monitor\nclass DeadlineMonitor {\n    constructor(notificationManager) {\n        this.notifications = notificationManager;\n        this.checkInterval = null;\n    }\n\n    startMonitoring() {\n        // Check deadlines every hour\n        this.checkInterval = setInterval(() => {\n            this.checkUpcomingDeadlines();\n        }, 60 * 60 * 1000);\n\n        // Initial check after 5 seconds to not overwhelm on page load\n        setTimeout(() => this.checkUpcomingDeadlines(), 5000);\n    }\n\n    stopMonitoring() {\n        if (this.checkInterval) {\n            clearInterval(this.checkInterval);\n            this.checkInterval = null;\n        }\n    }\n\n    checkUpcomingDeadlines() {\n        const deadlineElements = document.querySelectorAll('[data-deadline]');\n        const now = new Date();\n        \n        deadlineElements.forEach(element => {\n            const deadline = new Date(element.dataset.deadline);\n            const projectName = element.dataset.projectName || 'Project';\n            const status = element.dataset.status || '';\n            \n            // Skip completed projects\n            if (status.toLowerCase() === 'completed') return;\n            \n            const timeDiff = deadline - now;\n            const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n            \n            // Alert for projects due in 3 days or less, but not overdue\n            if (daysLeft <= 3 && daysLeft > 0) {\n                this.notifications.showDeadlineAlert(projectName, daysLeft);\n            }\n        });\n    }\n}\n\n// Initialize notification system\nlet notificationManager;\nlet studyNotifier;\nlet deadlineMonitor;\n\n// Test notification function for debugging\nfunction testNotification() {\n    if (Notification.permission === 'granted') {\n        new Notification('üß™ Test Notification', {\n            body: 'Desktop notifications are working correctly!',\n            icon: '/static/favicon.ico'\n        });\n    } else {\n        console.log('Notifications not enabled. Permission:', Notification.permission);\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Initialize notification system\n    notificationManager = new NotificationManager();\n    studyNotifier = new StudySessionNotifier(notificationManager);\n    deadlineMonitor = new DeadlineMonitor(notificationManager);\n    \n    // Wait for initialization to complete\n    await notificationManager.init();\n    \n    // Start deadline monitoring\n    deadlineMonitor.startMonitoring();\n    \n    // Show permission prompt for new users after page loads\n    setTimeout(() => {\n        if (Notification.permission === 'default') {\n            showNotificationPermissionPrompt();\n        }\n    }, 2000);\n    \n    // Add notification integration to existing functionality\n    integrateWithExistingFeatures();\n});\n\n// User-friendly notification permission prompt\nfunction showNotificationPermissionPrompt() {\n    // Don't show if already shown or dismissed\n    if (document.querySelector('.notification-prompt') || localStorage.getItem('notifications_dismissed')) {\n        return;\n    }\n    \n    const promptHtml = `\n        <div class=\"alert alert-primary alert-dismissible fade show notification-prompt position-fixed\" \n             style=\"top: 20px; left: 50%; transform: translateX(-50%); z-index: 1050; max-width: 500px;\" role=\"alert\">\n            <div class=\"d-flex align-items-start\">\n                <i data-feather=\"bell\" class=\"me-2 mt-1\" style=\"width: 20px; height: 20px;\"></i>\n                <div class=\"flex-grow-1\">\n                    <h6 class=\"alert-heading mb-2\">üîî Enable Desktop Notifications</h6>\n                    <p class=\"mb-2 small\">Stay on top of your studies with notifications for:</p>\n                    <ul class=\"mb-3 small\">\n                        <li>Study session reminders every 25 minutes</li>\n                        <li>Project deadlines (3 days before due)</li>\n                        <li>Task completion celebrations</li>\n                        <li>Break reminders after long study sessions</li>\n                    </ul>\n                    <div class=\"d-flex gap-2\">\n                        <button type=\"button\" class=\"btn btn-primary btn-sm\" onclick=\"enableNotifications()\">\n                            <i data-feather=\"check\" style=\"width: 14px; height: 14px;\" class=\"me-1\"></i>\n                            Enable Notifications\n                        </button>\n                        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" onclick=\"dismissNotificationPrompt()\">\n                            Maybe Later\n                        </button>\n                    </div>\n                </div>\n                <button type=\"button\" class=\"btn-close btn-sm\" onclick=\"dismissNotificationPrompt()\"></button>\n            </div>\n        </div>\n    `;\n    \n    document.body.insertAdjacentHTML('afterbegin', promptHtml);\n    \n    // Replace feather icons\n    if (typeof feather !== 'undefined') {\n        feather.replace();\n    }\n    \n    console.log('Notification permission prompt shown');\n}\n\nasync function enableNotifications() {\n    console.log('Enabling notifications...');\n    \n    try {\n        // Request permission\n        const permission = await Notification.requestPermission();\n        console.log('Permission result:', permission);\n        \n        if (permission === 'granted') {\n            // Update notification manager\n            notificationManager.permission = permission;\n            notificationManager.enabled = true;\n            \n            // Show success notification\n            const notification = new Notification('üîî Notifications Enabled!', {\n                body: 'You\\'ll now receive study reminders and deadline alerts.',\n                icon: '/static/favicon.ico'\n            });\n            \n            setTimeout(() => notification.close(), 5000);\n            \n            console.log('Notifications enabled successfully');\n        } else {\n            console.log('Notification permission denied');\n        }\n    } catch (error) {\n        console.error('Error enabling notifications:', error);\n    }\n    \n    dismissNotificationPrompt();\n}\n\nfunction dismissNotificationPrompt() {\n    const prompt = document.querySelector('.notification-prompt');\n    if (prompt) {\n        prompt.remove();\n    }\n    \n    // Remember dismissal for this session\n    localStorage.setItem('notifications_dismissed', 'true');\n    console.log('Notification prompt dismissed');\n}\n\n// Integrate notifications with existing features\nfunction integrateWithExistingFeatures() {\n    // Override existing task completion handler\n    const originalUpdateTaskStatus = window.updateTaskStatus;\n    if (typeof originalUpdateTaskStatus === 'function') {\n        window.updateTaskStatus = function(taskId, taskName, isCompleted) {\n            // Call original function\n            originalUpdateTaskStatus(taskId, taskName, isCompleted);\n            \n            // Add notification\n            if (isCompleted && notificationManager.canNotify()) {\n                notificationManager.showTaskComplete(taskName);\n            }\n        };\n    }\n    \n    // Add notifications to study timer if it exists\n    if (window.studyNotifier) {\n        const originalStart = window.studyNotifier.startSession;\n        const originalStop = window.studyNotifier.stopSession;\n        \n        if (originalStart) {\n            window.studyNotifier.startSession = function(projectName) {\n                originalStart.call(this, projectName);\n                studyNotifier.startSession(projectName);\n            };\n        }\n        \n        if (originalStop) {\n            window.studyNotifier.stopSession = function() {\n                originalStop.call(this);\n                studyNotifier.stopSession();\n            };\n        }\n    }\n}\n\n// Export to global scope\nwindow.notificationManager = notificationManager;\nwindow.studyNotifier = studyNotifier;\nwindow.deadlineMonitor = deadlineMonitor;\nwindow.enableNotifications = enableNotifications;\nwindow.dismissNotificationPrompt = dismissNotificationPrompt;\nwindow.testNotification = testNotification;\n\nconsole.log('Desktop notifications system loaded');","size_bytes":14955}}}